"use strict";
exports.__esModule = true;
exports.arrayWebDevelopment = exports.linksWebDevelopment = void 0;
exports.linksWebDevelopment = [
    {
        href: "https://htmlacademy.ru/blog/boost/frontend/semantics",
        title: "Семантическая вёрстка"
    },
    {
        href: "https://imajor.ru/glossary/terms/krossbrauzernost.18/",
        title: "Кроссбраузерность"
    },
    {
        href: "https://jazzteam.org/ru/technical-articles/overview-of-approaches-and-css-frameworks-for-adaptive-web-page-layout/",
        title: "Адаптивная верстка сайтов: обзор подходов и CSS фреймворков"
    },
    {
        href: "https://mailsgun.ru/%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D0%B8%D0%BA-%D0%B0%D0%B9%D1%82%D0%B8%D1%88%D0%BD%D0%B8%D0%BA%D0%B0-%D0%B8%D0%BB%D0%B8-%D1%87%D1%82%D0%BE-%D0%B3%D0%B4%D0%B5-%D0%BA%D1%83%D0%B4%D0%B0-%D1%87/",
        title: "Словарик айтишника или Что? Где? Куда? Часть 1"
    },
    {
        href: "https://fixer.io/",
        title: "Иностранная валюта курсы и валюта конверсионный JSON-API"
    },
    {
        href: "https://apilayer.com/account",
        title: "Curated API Marketplace. Кураторская торговая площадка API"
    },
    {
        href: "https://apilayer.com/marketplace/currency_data-api",
        title: "Currency Data API. API данных валюты"
    },
    {
        href: "https://apilayer.com/marketplace/exchangerates_data-api",
        title: "Exchange Rates Data API. API данных обменных курсов"
    },
    {
        href: "https://jsonplaceholder.typicode.com/",
        title: "{JSON} Placeholder"
    },
    {
        href: "https://dwstroy.ru/stail/plaginy-rasshireniya/emmet-shpargalka/ ",
        title: "EMMET ШПАРГАЛКА HTML, CSS. EMMET ШПАРГАЛКА ДЛЯ МОЛНИЕНОСНОСТНОЙ ВЕРСТКИ"
    },
    {
        href: "https://axios-http.com/ru/",
        title: "Axios - простой HTTP-клиент для браузера и node.js на основе Promise."
    },
    {
        href: "https://dev.to/mperon/axios-error-handling-like-a-boss-333d",
        title: "Axios и обработка ошибок как"
    },
    {
        href: "https://www.digitalocean.com/community/tutorials/react-axios-react-ru",
        title: "Использование Axios с React"
    },
    {
        href: "https://www.youtube.com/watch?v=ltn9QoBCJkU&t=9s",
        title: "Axios + TS. Axios от А до Я. Полный курс в React приложении. "
    },
    {
        href: "https://www.youtube.com/watch?v=3BdWl6hcSWs",
        title: "VS Code плагины 2023. VS Code Plugins 2023"
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/708",
        title: "Webpack. Часть 1 из 2. Точки входа и выхода, плагины webpack, модули и загрузчики"
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/709",
        title: "Webpack. Часть 2 из 2. Загрузка шрифтов, sass-loader, babel-loader и т.д."
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/712",
        title: "Расширение «Prettier — Code formatter» для VS Code"
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/713",
        title: "Расширение «ESLint» для VS Code, часть 1 из 2"
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/714",
        title: "Расширение «ESLint» для VS Code, часть 2 из 2"
    },
    {
        href: "https://tokmakov.msk.ru/blog/item/711",
        title: "Расширение «Remote — SSH» для VS Code"
    },
    {
        href: "https://tokmakov.msk.ru/github",
        title: "Узелки на память"
    },
    {
        href: "https://atuin.ru/",
        title: "СОЗДАНИЕ И ДОРАБОТКА САЙТОВ БЛОГ И ИНСТРУМЕНТЫ ДЛЯ ВЕБМАСТЕРОВ"
    },
    {
        href: "https://webformyself.com/category/javascriptajax-2/javascriptajax/",
        title: "Статьи по сайтостроению(много)"
    },
    {
        href: "https://developer.mozilla.org/ru/",
        title: "Веб-технологии для разработчиков"
    },
    {
        href: "https://www.figma.com/file/E1ctRoFLkYECcIDJgWDXK8Sv/Web-%E2%80%A2-Alpha?node-id=0%3A1",
        title: "figma.com Alpha"
    },
    {
        href: "https://www.figma.com/file/1ROI5eUMFVLsyKHxRUCwE5/NPF-%E2%80%A2-Renpensions-site?node-id=0%3A1634",
        title: "figma.com NPF"
    },
    {
        href: "https://www.figma.com/file/R82Jy7NiMWrP7VHVn8Paqp/%D0%A6%D0%B0%D1%80%D1%8C-%D0%BB%D0%B5%D0%BD%D0%B4%D0%BE%D1%81-1.1?node-id=216%3A468",
        title: "figma.com Царь-лендос"
    },
    {
        href: "https://www.figma.com/file/8JLUz1mZDIMkE8BvTumzdd/Untitled?node-id=0%3A1",
        title: "figma.com Южный банк"
    },
    {
        href: "https://kolmogorov.pro/what-is-it-babel-chto-takoe-dge-ispolzuyut",
        title: "Что такое Babel и где его используют"
    },
    {
        href: " ",
        title: " "
    },
];
exports.arrayWebDevelopment = [
    {
        heading: "БЭМ-методология",
        answer: [
            "БЭМ (Блок, Элемент, Модификатор) — компонентный подход к веб-разработке. В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы любой сложности и повторно использовать существующий код, избегая «Copy-Paste».",
            "Блок - функционально независимый компонент страницы, который может быть повторно использован. Блоки можно вкладывать друг в друга. Допустима любая вложенность блоков.",
            "Элемент - Составная часть блока, которая не может использоваться в отрыве от него. Элементы можно вкладывать друг в друга. Допустима любая вложенность элементов. Элемент — всегда часть блока, а не другого элемента.",
            "Структура полного имени элемента соответствует схеме: имя-блока__имя-элемента. Имя элемента отделяется от имени блока двумя подчеркиваниями (__).",
            "Модификатор - Cущность, определяющая внешний вид, состояние или поведение блока либо элемента.",
            "Какие требования мы сформулировали:",
            " - Разработчик должен понимать свой код (даже вернувшись к нему через год) и код любого программиста в команде БЭМ-проекта.",
            " - Любой блок кода может быть использован повторно: необходимо создать общую базу знаний и не писать каждый раз всё с нуля, а использовать готовые наработки.",
            " - Работая в одной команде, разработчики, менеджеры, дизайнеры и верстальщики должны называть одни и те же вещи одинаково. То есть говорить на одном языке.",
            " - Команды могут обмениваться специалистами для реализации какой-то конкретной функциональности.",
            " - Порог входа при переходе на новый проект должен быть снижен за счет одинаковой структуры организации всех БЭМ-проектов и одинаковых правил именования всех сущностей.",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Семантическая вёрстка",
        answer: [
            "Семантическая вёрстка - создание веб-страниц при использовании HTML-тегов в соответствии с их семантикой (предназначением), предполагающее иерархию страницы. Для оформления веб-страниц, написанных в соответствии с семантикой, используются каскадные таблицы стилей (CSS). Стандарт HTML с самого начала включал в себя ряд семантических тегов, но большую популярность семантическая вёрстка получила после начала работ над HTML5.",
            "Семантическая вёрстка — это разметка, которая опирается на смысловое предназначение каждого блока и логическую структуру документа.  ",
        ],
        isParagraph: true
    },
    {
        heading: "Кроссбраузерность",
        answer: [
            "Кроссбраузерность – это способность веб-ресурса отображаться одинаково и работать во всех популярных браузерах, без перебоев в функционировании и ошибок в верстке, а также с одинаково корректной читабельностью контента. Из-за стремительного развития технологий, сайт рекомендуется делать кроссбраузерным только по отношению к новейшим версиям браузеров:",
            " - Google Chrome. ",
            " - Mozilla Firefox.",
            " - Opera.",
            " - Internet Explorer.",
            " - Netscape.",
            " - Safari.",
            " Стоит отметить, что элементы веб-ресурса не должны быть абсолютно идентичны во всех браузерах, которые существуют на сегодняшний день. Соответствующим можно считать сайт, если:",
            " - информация на странице читабельная;",
            " - сохранена структура;",
            " - нет ошибок в верстке; ",
            " - текст не «накладывается» поверх другого текста и изображений, если только это не предусмотрено автором контента.",
        ],
        isParagraph: true
    },
    {
        heading: "Фиксированная верстка",
        answer: [
            "Фиксированная верстка (Fixed Layout) — подход создания страниц сайта, которые имеют заданную ширину. Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки. Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.",
            "Пример ниже демонстрирует строгое задание ширины для тега body:",
            "body { width: 1200px }",
        ],
        isParagraph: true
    },
    {
        heading: "Резиновая верстка",
        answer: [
            "Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).",
            "Примеры использования техник резиновой верстки:",
            " -  body { width: 90% }",
            " -  div { min-width: 320px; max-width: 1200px }",
        ],
        isParagraph: true
    },
    {
        heading: "Адаптивная верстка",
        answer: [
            "Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например, с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять указанные значения в автоматическом режиме. В примере ниже задается ширина div равная 960px для всех устройств, ширина которых меньше 1200px и 320px для всех устройств, ширина которых меньше 480px.",
            " - @media all and (max-width: 1200px) { div { width: 960px } } ",
            " - @media all and (max-width: 480px) {  div { width: 320px } }",
        ],
        isParagraph: true
    },
    {
        heading: "Отзывчивая верстка",
        answer: [
            "Отзывчивая верстка (Responsive Layout) — это объединение резиновой и адаптивной вёрстки. При данном подходе используются как медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать, что сайт приспособится к любому устройству.",
            "Ниже задается ширина div равная 50% от размера родительского компонента для всех устройств, ширина которых меньше 1200px и 100% для всех устройств, ширина которых меньше 480px.",
        ],
        isParagraph: true
    },
    {
        heading: "Можете ли вы объяснить разницу между отзывчивым (responsive) сайтом и сайтом, сделанным по принципу mobile-first?",
        answer: [
            "Отзывчивая и mobile-first верстки служат для того, чтобы пользователь мог пользоваться сайтом с разных устройств. Верстка подстраивается под различные размеры экрана, разрешения, контекст использования, механизмы контроля и т.д.",
            "Отзывчивая верстка начинается с верстки десктопной версии сайта. Затем она адаптируется для меньших экранов.",
            "Mobile-first начинается с верстки версии сайта для мобильных устройств.",
        ],
        isParagraph: true
    },
    {
        heading: "Основные техники реализации сайтов под любое разрешение. Относительные значения",
        answer: [
            "Использование относительных значений позволяет отобразить информацию и компоненты на странице без потери читабельности и удобства просмотра.",
            "Относительные значения для размеров и отступов",
            " Относительные значения можно задавать для width, height, margin, padding и т. д. Самый известный способ задания относительного размера — указание в процентах (%).",
            " Ниже приводится пример задания ширины равной 90% от размера родительского компонента.",
            " body { width: 90% }",
            " При этом значение высчитывается относительно родительского компонента.",
            " Также существуют значения относительно размера экрана:",
            " - vw — 1% ширины окна. При уменьшении ширины окна, уменьшается ширина, высота, шрифт элемента; ",
            " - vh — 1% высоты окна. При уменьшении высоты окна, уменьшается ширина, высота, шрифт элемента;",
            " - vmin — выбирается наименьшее из vw и vh;",
            " - vmax — выбирается наибольшее из vw и vh.",
            " - Ниже рассмотрен пример использования vw и vh. В данном случае ширина и высота тега div будут равны 50% от ширины и высоты экрана соответственно.",
            " div { width: 50vw; height: 50vh }",
        ],
        isParagraph: true
    },
    {
        heading: "Основные техники реализации сайтов под любое разрешение. Относительные значения для размера шрифта",
        answer: [
            "Существуют следующие относительные значения для шрифтов:",
            " - em — задаёт размер относительно шрифта родителя;",
            " - rem — задаёт размер относительно шрифта html.",
            "Рассмотрим пример: html { font-size: 20px } body { font-size: 1.5em }",
            "Вычислим размер шрифта для тега body. В данном примере размер шрифта для body задается относительно размера html. Таким образом, размер шрифта для body будет равен 30px (20px * 1.5 = 30px).",
            "Также относительные размеры шрифта можно задавать с помощью %, vw, vh и т. д. В следующем примере размер шрифта для body равен 80% от размера шрифта html — 16px.",
            " html {font-size: 20px } ",
            " body { font-size: 80%  } ",
        ],
        isParagraph: true
    },
    {
        heading: "Основные техники реализации сайтов под любое разрешение. Максимальные и минимальные размеры компонентов",
        answer: [
            "Для задания максимальных и минимальных значений ширины и высоты компонента используются свойства max-width / min-width и max-height / min-height соответственно.",
            "Рассмотрим пример: div { width: 60%; max-width: 500px }",
            "Допустим, что родительским компонентом данного div является body. Тогда, при изменении ширины экрана, ширина данного компонента будет составлять 60% от ширины body. Однако он будет увеличиваться только до величины, определенной в max-width, это 500px. Как только контейнер достигнет этой ширины — он перестанет увеличиваться.",
            "Использование медиа-запросов",
        ],
        isParagraph: true
    },
    {
        heading: "HTML - Язык программирования",
        answer: [
            "HTML — стандартизированный язык гипертекстовой разметки документов для просмотра веб-страниц в браузере. Веб-браузеры получают HTML документ от сервера по протоколам HTTP/HTTPS или открывают с локального диска, далее интерпретируют код в интерфейс, который будет отображаться на экране монитора.",
        ],
        isParagraph: true
    },
    {
        heading: "CSS",
        answer: [
            "Каскадная таблица стилей (CSS) формально является набором команд и инструментов для работы с внешним видом веб-страницы. Она делает интерфейс более восприимчивым и приятным – огромное количество сайтов работает на основе связки HTML и CSS. Как и в случае с языками программирования, существует множество готовых библиотек CSS, созданных профессионалами для удобства работы со стилями.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое DOM?",
        answer: [
            "DOM (Document Object Model, объектная модель документа) — это программный интерфейс к HTML-документам, который позволяет воздействовать на документ из скриптов, меняя его стили, содержимое. В DOM документ представлен в виде дерева узлов.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое API",
        answer: [
            "API - Application Programming Interface. Он обеспечивает взаимодействие между двумя системами. Это как винтик, который связывает две детали. Соответственно API могут быть не только в ВЭБ - приложении, они могут быть и в микроконтроллерах, и в каких то десктопных приложениях и т.д. ",
        ],
        isParagraph: true
    },
    {
        heading: "Десктопные приложения",
        answer: [
            "Десктопные приложения – это программы, логика работы которых требует наличия оператора (человека работающего с программой), содержащие в себе всю полную функциональность и способные работать отдельно на любой машине изолированно от других приложений. Microsoft Word, Excel, Блокнот, однопользовательские игры – всё это примеры десктопных приложений. Для их работы необходимы лишь достаточные аппаратные ресурсы компьютера, само приложение и набор библиотек, содержащих функции для работы с приложением.",
            "Десктопные приложения могут быть также и многопользовательскими. Например, редактор файлов который в зависимости от логина и пароля, введенных при запуске, будет давать доступ к различным файлам. И программа и файлы находятся на одном компьютере, просто производится локальное разграничение доступа для разных пользователей.",
        ],
        isParagraph: true
    },
    {
        heading: "Какая разница между элементами span и div?",
        answer: [
            " - span — это строчный (inline) элемент",
            " - div — это блочный (block) элемент.",
            "Элементы div нужно использовать для оформления разделов документа. А элементы span — в роли контейнеров для небольших объёмов текста, для изображений и других подобных элементов страниц.",
            "Надо отметить, что нельзя помещать блочные элементы в строчные.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое мета-теги?",
        answer: [
            "Мета-теги — это теги, находящиеся в теге <head> и описывающие содержимое страницы. Мета-теги не выводятся на странице. Они имеются лишь в её коде.",
        ],
        isParagraph: true
    },
    {
        heading: "Концепция",
        answer: [
            "Конце́пция (от лат. conceptio «система понимания»): комплекс взглядов на что-либо, связанных между собой и образующих единую систему; определённый способ понимания, трактовки каких-либо явлений; основная точка зрения, руководящая идея для их освещения; система взглядов на явления — в мире, природе, обществе; ведущий замысел, конструктивный принцип — в научной, художественной, технической, политической и других видах деятельности....",
            "Термин концепция употребляется также для обозначения ведущего замысла, конструктивного принципа в научной, художественной, технической, политической, юридической и других видах деятельности. ",
            "Примеры концепции: концепция научной диссертации, концепция фильма, концепция продукта.",
            "В более широком понимании концепция - это способ понимания или толкования чего-либо, являющейся составной частью нашего мира. Сюда можно отнести различные теории, гипотезы, взгляды, мнения. Примером в области философии или религии может служить коммунизм, капитализм, гуманизм, язычество, буддизм и т.д. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Концепции программирования: ",
        answer: [
            "1. Процедурное программирование; ",
            "2. Модульное программирование;",
            "3. Объектно-ориентированное программирование;",
            "Порядок перечисления этих концепций соответствует и хронологии их зарождения. ",
        ],
        isParagraph: true
    },
    {
        heading: "Какие существуют основные принципы ООП? ",
        answer: [
            "Базовые принципы ООП: ",
            "1. Абстракция — отделение концепции от ее экземпляра; ",
            "2. Полиморфизм — реализация задач одной и той же идеи разными способами;",
            "3. Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию;",
            "4. Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним.",
            " ",
            " ",
            " ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Первый базовый принцип ООП: абстракция.",
        answer: [
            "Абстракция — отделение концепции от ее экземпляра; ",
            "Слой абстрагирования (или уровень абстракции) — это способ уйти от деталей реализации конкретного множества функций ",
        ],
        isParagraph: true
    },
    {
        heading: "Второй базовый принцип ООП: полиморфизм  ",
        answer: ["Полиморфизм — реализация задач одной и той же идеи разными способами; ", " "],
        isParagraph: true
    },
    {
        heading: "Третий базовый принцип ООП: наследование.",
        answer: [
            "Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию; ",
        ],
        isParagraph: true
    },
    {
        heading: "Четвёртый базовый принцип ООП: инкапсуляция  ",
        answer: ["Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним. "],
        isParagraph: true
    },
    {
        heading: "Что такое SOLID (объектно-ориентированное программирование)?",
        answer: [
            "SOLID (сокр. от англ. single responsibility, open-closed) в программировании — мнемонический акроним, пять основных принципов объектно-ориентированного программирования и проектирования. Принципы SOLID — это руководства, которые также могут применяться во время работы над существующим программным обеспечением для его улучшения - например для удаления «дурно пахнущего кода». ",
            "Избавиться от 'признаков плохого проекта' помогают следующие пять принципов SOLID: ",
            "1. S - Принцип единственной ответственности (The Single Responsibility Principle) каждый класс выполняет лишь одну задачу.",
            "2. O - Принцип открытости/закрытости (The Open Closed Principle) «программные сущности должны быть открыты для расширения, но закрыты для модификации.»",
            "3. L - Принцип подстановки Барбары Лисков (The Liskov Substitution Principle) «объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.» См. также контрактное программирование. Наследующий класс должен дополнять, а не изменять базовый.",
            "4. I - Принцип разделения интерфейса (The Interface Segregation Principle) «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения.»",
            "5. D - Принцип инверсии зависимостей (The Dependency Inversion Principle) «Зависимость на Абстракциях. Нет зависимости на что-то конкретное.» ",
        ],
        isParagraph: true
    },
    {
        heading: "Мнемоника, акроним.",
        answer: [
            "Понимание мнемоники ",
            "1. Мнемоника - это устройство памяти, предназначенное для помощи людям, обычно студентам, с трудной для восприятия информации. Он использует связь между предшествующими знаниями и новыми понятиями через вербальные, визуальные и акустические подсказки. Акронимы могут также быть мнемоникой наряду с рифмами, ключевыми словами и ассоциацией картинок. Его можно формально преподавать, или каждый студент может развить свою собственную мнемонику, чтобы начать свою память. ",
            "2. Взято с греческого слова mnemonikos значение, связанное в объем памяти, мнемоника помогает в качестве помощника искусственной памяти, когда естественная неудача или затрудняет запоминание сложной информации. Это может быть что-то вроде использования суставов, чтобы помнить количество дней в каждом месяце или уникальную строку слов для запоминания планет в правильном порядке. ",
            "Что такое Акроним?",
            "1. Что такое Акроним? Подобно аббревиатуре, аббревиатура формируется путем взятия первых букв каждого слова и создания другого слова, которое поможет вам вспомнить слово / слова, которые вы хотите запомнить. Последовательность букв важна в аббревиатуре. Акронимы записываются только в прописных буквах и обычно могут быть объявлены как новое слово. Возможно, самым известным акронимом является POTUS - президент Соединенных Штатов. Общие акронимы - синдром приобретенного СПИДа - синдром дефицита иммунитета, СТРАНИЦА - шлюз общественного доступа для энергетики и науки и СААРК - Ассоциация региональных стран Южной Азии. Хотя большинство акронимов можно выразить как новые слова, возможно, что некоторые аббревиатуры не могут. ",
            "Насколько они разные? ",
            "1. Хотя мнемоники не являются аббревиатурами, акронимы - это тип мнемоники.",
            "2. Хотя акронимы состоят из первых букв всех слов в последовательном порядке, мнемоники находятся в форме рифмованных слов или поддельных имен.",
            "3. Акронимы чаще всего выражаются как другое слово, в то время как мнемоника не может быть.",
            "4. Акронимы, как правило, запоминают строку слов, которые составляют название организации или болезни. Мнемоника используется для запоминания чего-либо.",
            "Итак, в заключение можно сказать, что хотя и мнемоника, и акронимы приводят к увеличению памяти, они различаются по форме и структуре. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Babel и для чего он используется?",
        answer: [
            "Babel - это программа, позволяющая менять исходный код одной программы на эквивалентный исходный код на другом языке. В нашем случае Babel переписывает современный Javascript на старый.",
            "JavaScript постоянно развивается, разрастается новыми спецификациями и предложениями, новыми функции появляются буквально каждый день. Обновления языка Javascript происходит каждый год",
            "Не все современные браузеры могут или хотят идти в ногу с этими изменениями. А еще, к этому прибавляем старые браузеры, которые больше никогда не обновятся. Но их все равно пока используют, привет Internet Explorer.",
            "Вот здесь и нужен Babel. Он помогает не ждать обновлений браузеров, а сразу использовать всю мощь современных стандартов Javascript. ",
        ],
        isParagraph: true
    },
    {
        heading: " ",
        answer: [" ", " ", " ", " "],
        isParagraphBefore: true
    },
];
