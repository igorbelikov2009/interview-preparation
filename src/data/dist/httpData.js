"use strict";
exports.__esModule = true;
exports.arrayHTTP = exports.linksHTTP = void 0;
exports.linksHTTP = [
    {
        href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers",
        title: "Заголовки HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
        title: "Методы запроса"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP",
        title: "Безопасный метод HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/Idempotent",
        title: "ИдемпотентныЙ метод HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/cacheable",
        title: "Кэшируемый ответ HTTP"
    },
];
exports.arrayHTTP = [
    {
        heading: "Как работает WWW (всемирная паутина, веб) в двух словах.",
        answer: [
            "Браузер пользователя (клиент) отправляет на сервер запрос с адресом сайта (URL), сервер получает этот запрос и отдаёт клиенту требуемый тому контент. Иными словами, весь современный веб построен на модели клиент-серверного взаимодействия. И чтобы весь этот процесс оказался возможным, необходим универсальный язык-протокол, который будет понимать и сервер, и браузер. Такой протокол есть, а называется он HTTP.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое HTTP?",
        answer: [
            "Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами 'запрос-ответ'. Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой. ",
            "Ниже перечислены общие функции, управляемые с HTTP: ",
            "1. Кэш. Сервер может инструктировать прокси и клиенты: что и как долго кэшировать. Клиент может инструктировать прокси промежуточных кэшей игнорировать хранимые документы.",
            "2. Ослабление ограничений источника. Для предотвращения шпионских и других, нарушающих приватность, вторжений, веб-браузер обчеспечивает строгое разделеление между веб-сайтами. Только страницы из того же источника могут получить доступ к информации на веб-странице. Хотя такие ограничение нагружают сервер, заголовки HTTP могут ослабить строгое разделение на стороне сервера, позволяя документу стать частью информации с различных доменов (по причинам безопасности).",
            "3. Аутентификация. Некоторые страницы доступны только специальным пользователям. Базовая аутентификация может предоставляться через HTTP, либо через использование заголовка WWW-Authenticate и подобных ему, либо с помощью настройки спецсессии, используя куки.",
            "4. Прокси и тунелирование. Серверы и/или клиенты часто располагаются в интернете и скрывают свои истинные IP-адреса от других. HTTP запросы идут через прокси для пересечения этого сетевого барьера. Не все прокси -- HTTP прокси. SOCKS-протокол, например, оперирует на более низком уровне. Другие, как, например, ftp, могут быть обработаны этими прокси.",
            "5. Сессии. Использование HTTP кук позволяет связать запрос с состоянием на сервере. Это создает сессию, хотя ядро HTTP -- протокол без состояния. Это полезно не только для корзин в интернет-магазинах, но также для любых сайтов, позволяющих пользователю настроить выход.",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP и клиент серверная архитектура.",
        answer: [
            "В клиент-серверной архитектуре клиентом может быть всё, что угодно, что имеет доступ в сеть и может отсылать сформированные HTTP- запросы, либо XML- запросы на сервер и получать от него ответы: браузер (сайт, например, фейсбук, инстаграмм), мобильное приложение, умная бытовая техника, имеющая доступ к сети, серверное приложение, настольное приложение (например, клиент компьютерной игры).",
            "Вся информация хранится на сервере, и читается - меняется клиентом по запросу. Клиентское приложение формирует запросы и отправляет на сервер. После чего програмное обеспечение сервера формирует ответ и отправляет его клиенту. После этого клиентское приложение может отправлять другие запросы, которые будут обработаны аналогичным образом.",
        ],
        isParagraph: true
    },
    {
        heading: "Для чего нужен HTTP.",
        answer: [
            "HTTP - протокол передачи гипертекста. Он разработан для передачи HTML- документов, для связи между браузерами и серверами, но может использоваться и для других целей. HTTP следует модели клиент-сервер, когда клиент делает запрос на сервер и ждёт от него ответа. HTTP — это протокол без сохранения состояния, что означает, что сервер не сохраняет никаких данных (состояния) между двумя запросами. Есть версии HTTP/1.1 и HTTP/2.",
        ],
        isParagraph: true
    },
    {
        heading: "Что означает s в HTTPs.",
        answer: [
            "Фактически, это тот же самый протокол HTTP, только с дополнительным уровнем шифрования. HTTPS расшифровывается как «защита протокола передачи гипертекста». Таким образом, HTTP — самостоятельный протокол, а HTTPS — расширение для его защиты. По HTTP информация передается незащищенной, а HTTPS обеспечивает криптографическую защиту. Особенно актуально это для ресурсов с ответственной авторизацией. Это могут быть социальные сети или сайты платежных систем.",
            "Таким образом, HTTP применяется для передачи данных, а HTTPS позволяет осуществлять защищенную передачу данных с помощью шифрования и выполнять авторизацию на ресурсах с высоким уровнем безопасности.",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP - сообщения.",
        answer: [
            "HTTP - сообщения подразделяются на 2 типа: HTTP - запросы, которые отправляет клиент, например браузер на сервер. HTTP - ответы, сообщения, которые отправляет сервер.",
            "У каждого HTTP - сообщения есть свои заголовки, строка состояния и, по возможности, тело.",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP - заголовки.",
        answer: [
            "HTTP - заголовки позволяют клиенту и серверу передавать дополнительную информацию с HTTP-запросом или ответом. Заголовки можно сгруппировать в соответствии с их контекстом: ",
            " - заголовки запроса содержат дополнительную информацию о ресурсе, который необходимо получить, или о клиенте, запрашивающем ресурс.",
            " - заголовки ответов содержат дополнительную информацию об ответе, например, о его местонахождении или о сервере, который его предоставил.",
            " - заголовки представления содержат информацию о теле ресурса, например о его MIME-типе или применяемом кодировании/сжатии.",
            " - заголовки полезной нагрузки содержат независимую от представления информацию о полезных данных, включая длину содержимого и кодировку, используемую для транспортировки.",
        ],
        isParagraph: true
    },
    {
        heading: "Запросы - первый тип HTTP сообщений.",
        answer: [
            "Запросы содержат следующее: ",
            " - HTTP-метод. Обычно GET, POST. Или OPTIONS и HEAD, определяющее операцию, которую клиент хочет выполнить. Обычно, клиент хочет получить ресурс (используя GET) или передать значения HTML-формы (используя POST), хотя другие операция могут быть необходимы в других случаях.",
            " - Путь к ресурсу: URL (http://)",
            " - Версию HTTP-протокола. Заголовки, предоставляющие дополнительную информацию для сервера.",
            " - Тело, для некоторых методов, таких как POST, которые отправляют ресурс.",
            " - Строка состояния: [метод][URI][HTTP/версия], пример: GET/hello.html HTTP/1.1 Заголовки:",
        ],
        isParagraph: true
    },
    {
        heading: "Из чего состоит HTTP-запрос?",
        answer: [
            "Запросы содержат следующие элементы: ",
            "1. HTTP-метод, обычно глагол подобно GET, POST или существительное, как OPTIONS или HEAD, определяющее операцию, которую клиент хочет выполнить. Обычно, клиент хочет получить ресурс (используя GET) или передать значения HTML-формы (используя POST), хотя другие операция могут быть необходимы в других случаях.",
            "2. Путь к ресурсу: URL ресурсы лишены элементов, которые очевидны из контекста, например без protocol (http://), domain (здесь developer.mozilla.org), или TCP port (здесь 80).",
            "3. Версию HTTP-протокола.",
            "4. Заголовки (опционально), предоставляюшие дополнительную информацию для сервера.",
            "5. Или тело, для некоторых методов, таких как POST, которое содержит отправленный ресурс.",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Методы HTTP-запроса (Request Methods).",
        answer: [
            "HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится для данного ресурса. Несмотря на то, что их названия могут быть существительными, эти методы запроса иногда называются HTTP глаголами. Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными, идемпотентными или кэшируемыми. ",
            "1. GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.",
            "2. HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.",
            "3. POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.",
            "4. PUT заменяет все текущие представления ресурса данными запроса.",
            "5. DELETE удаляет указанный ресурс.",
            "6. CONNECT устанавливает 'туннель' к серверу, определённому по ресурсу.",
            "7. OPTIONS используется для описания параметров соединения с ресурсом.",
            "8. TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.",
            "9. PATCH используется для частичного изменения ресурса.",
        ],
        isParagraph: true
    },
    {
        heading: "Чем отличаются HTTP-методы GET и POST.",
        answer: [
            "HTTP-методы GET и POST — самые распространённые способы отправить или получить данные с сервера. Но в разных случаях оба метода могут быть небезопасными или неудобными в использовании. В этой заметке рассмотрим, какой метод когда использовать.",
            "GET — метод для чтения данных с сайта. Например, для доступа к указанной странице. Он говорит серверу, что клиент хочет прочитать указанный документ. На практике этот метод используется чаще всего, например, в интернет-магазинах на странице каталога. Фильтры, которые выбирает пользователь, передаются через метод GET.",
            "POST — метод для отправки данных на сайт (сервер). Чаще всего с помощью метода POST передаются формы.",
            "GET для безопасных действий, POST для опасных",
            "Говоря совсем просто, GET-запросы лучше не использовать с приватной информацией. Вот почему: они кэшируются. Это значит, что логин и пароль, переданные через GET - запрос, могут остаться в интернете навсегда, например, в веб-архиве или кэше Гугла. Остаются в истории браузера. Чтобы узнать, какие данные отправлялись, достаточно нажать Ctrl+H.",
            "Сохраняются в закладках и пересылаются. Можно не обратить внимания и опубликовать в соцсетях или отправить ссылку с приватной информацией в GET-запросе. Сохраняются в логах сервера. Например, нельзя отправлять данные банковских карт через GET-запрос, так как это создаёт риски для пользователей. Таким образом, любые важные данные — логины, пароли, данные карты, персональные данные — лучше передавать с помощью метода POST. Также метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы.",
            "Ещё раз коротко",
            "GET: фильтры в интернет-магазинах, передача параметров через ссылку, другие безопасные запросы.",
            "POST: любые формы с паролями или банковскими картами, формы заявок с персональными данными, отправка файлов.",
        ],
        isParagraph: true
    },
    {
        heading: "Чем отличаются PUT- и POST-запросы?",
        answer: [
            "PUT - запросы приводят к замене целевого ресурса на данные, передаваемые в запросе. Его можно использовать для обновления содержимого существующего ресурса или для создания нового ресурса.",
            "POST - запросы приводят к специфической для ресурса обработке данных, передаваемых в запросе. Их можно использовать для выполнения различных действий. В том числе — для создания новых ресурсов, для выгрузки файлов на сервер, для отправки форм.",
            "Ещё одно отличие между PUT и POST запросами заключается в том, что PUT-запросы являются идемпотентными, а POST-запросы — нет. То есть — если запрос, в котором передаются одни и те же данные, и который выполняется по одному и тому же URL, будет выполнен несколько раз, это равносильно однократному выполнению этого запроса. Многократное выполнение POST-запроса не эквивалентно его однократному выполнению. То есть — несколько таких запросов, например, могут привести к созданию нескольких объектов на сервере.",
        ],
        isParagraph: true
    },
    {
        heading: "Ответы - второй тип HTTP сообщений.",
        answer: [
            "Ответы содержат следующие элементы:",
            "- Версию HTTP-протокола.",
            "- HTTP код состояния, сообщающий об успешности запроса или причине неудачи.",
            "- Сообщение состояния — краткое описание кода состояния.",
            "- HTTP заголовки, подобно заголовкам в запросах.",
            "- Опционально: тело, содержащее пересылаемый ресурс.",
            "- Строка состояния: [HTTP/версия][статус код], пример: HTTP/1.1 200 OK ",
            "- Заголовки. ",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP, коды ответов.",
        answer: [
            "1хх. Информационный",
            "--- 100 Continue (продолжай)",
            "2хх. Успех",
            "--- 200 Ok (Успех)",
            "--- 201 Created (Создано)",
            "--- 204 No content (Нет содержимого)",
            "3хх. Перенаправление",
            "--- 300 Moved permanently (перемещено навсегда)",
            "--- 301 Moved temporarily (перемещено временно)",
            "4хх. Ошибка клиента",
            "--- 400 Bad request (некорректный запрос)",
            "--- 401 Unauthorized (не авторизован)",
            "--- 404 Not found (не найден)",
            "5хх. Ошибка сервера",
            "--- 500 Internal server error (Внутренняя ошибка сервера)",
            "--- 502 Bad gateway (Ошибка проксирования)",
        ],
        isParagraph: true
    },
    {
        heading: "Безопасный метод HTTP.",
        answer: [
            "Метод HTTP безопасен , если он не изменяет состояние сервера. Другими словами, метод безопасен, если он приводит к операции только для чтения. Несколько распространенных HTTP-методов безопасны: GET, HEAD, или OPTIONS. Все безопасные методы также идемпотентны, но не все идемпотентные методы безопасны. Например, PUT и DELETE оба являются идемпотентными, но небезопасными. Все безопасные методы также идемпотентны: HEAD PUT DELETE POST.",
        ],
        isParagraph: true
    },
    {
        heading: "ИдемпотентныЙ метод HTTP.",
        answer: [
            "Метод HTTP является идемпотентным , если идентичный запрос может быть выполнен один или несколько раз подряд с одинаковым эффектом, оставляя сервер в одном и том же состоянии. Вызванный несколько раз подряд, клиент получает одинаковые результаты. Все безопасные методы также идемпотентны: HEAD PUT DELETE POST.",
        ],
        isParagraph: true
    },
    {
        heading: "Кэшируемый ответ HTTP",
        answer: [
            "Кэшируемый ответ — это HTTP-ответ, который можно кэшировать, который сохраняется для извлечения и использования позже, сохраняя новый запрос на сервер. Не все HTTP-ответы могут быть кэшированы.",
            " - Кэшируемые методы: GET, HEAD.",
            " - Некэшируемые методы: PUT, DELETE, часто POST",
        ],
        isParagraph: true
    },
    {
        heading: "URI URL URN",
        answer: [
            "URI - Uniform Resource Identifier. Унифицированный идентификатор ресурса. Включает в себя: URL и URN.",
            "URI: https://github.com/pulls/mentioned ",
            "URL - Uniform Resource Locator. Унифицированный определитель местонахождения ресурса.",
            "URL: https://github.com/",
            "URN - Uniform Resource Name. Унифицированное имя ресурса.",
            "URN: /pulls/mentioned",
        ],
        isParagraph: true
    },
    {
        heading: "Тело HTTP - сообщения.",
        answer: [
            "Тело HTTP - сообщения используется для передачи тела объекта запроса или тела объекта ответа. Тело сообщения может отсутствовать, но стартовая строка и заголовок являются обязательными элементами. Самым популярным типом тела сообщения является либо HTML, либо JSON.",
        ],
        isParagraph: true
    },
    {
        heading: "Прокси-сервер, прокси. ",
        answer: [
            "Прокси-сервер, прокси — это промежуточный сервер между пользователем интернета и серверами, откуда запрашивается информация. По сути, прокси — это посредник, фильтр или шлюз, который стоит между человеком и огромными (и не всегда безопасными) данными в сети. ",
            "С прокси-серверами сталкиваются почти все пользователи интернета, даже если они об этом не подозревают. ",
            "Прокси-сервер — это дополнительное звено между вами и интернетом. Некий посредник, который отделяет человека от посещаемого сайта. Создает условия, при которых сайт думает, что прокси — это и есть реальный человек. Только не вы. Такие посредники довольно многофункциональны и используются в нескольких сценариях: Для обеспечения конфиденциальности. Чтобы сайты не знали, кто именно их посещает. ",
            "---",
            "Прокси-сервер — промежуточный сервер (комплекс программ) в компьютерных сетях, выполняющий роль посредника между пользователем и целевым сервером (при этом о посредничестве могут как знать, так и не знать обе стороны), позволяющий клиентам как выполнять косвенные запросы (принимая и передавая их через прокси-сервер) к другим сетевым службам, так и получать ответы. Сначала клиент подключается к прокси-серверу и запрашивает какой-либо ресурс (например e-mail), расположенный на другом сервере.",
            " ",
            " ",
            " ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Обратный прокси. ",
        answer: [
            "Обратный прокси-сервер является службой, которая работает на каждом узле и обрабатывает разрешение конечных точек, автоматический повтор операций и другие сбои подключения от имени служб клиента. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Зачем нужен прокси? ",
        answer: [
            "Прокси сервер - это элемент сетевой инфраструктуры, который выполняет роль посредника между клиентским компьютером (терминал, браузер, приложение), находящимся во внутренней сети и другим сервером, который живёт во внешней сети или наоборот. ",
            "Прокси сервер может применяться для решения следующих задач: усиление безопасности защита приватности балансировка нагрузки на посещаемый ресурс. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Как работает прокси?",
        answer: [
            "Прокси – это сервер, к которому вы подключаетесь, чтобы изменить свой айпи-адрес. Работает это так:",
            "1. Пользователь из России подключился к прокси США. IP юзера изменился с российского на американский ",
            "2. Человек заходит на веб-ресурс.",
            "3. Устройство отправляет запрос прокси-серверу.",
            "4. Прокси-сервер отправляет запрос веб-странице от своего имени.",
            "5. Веб-страница отправляет данные промежуточному серверу",
            "6. Промежуточный сервер доставляет эти данные вам",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое прокси сервер и впн? ",
        answer: [
            "Прокси - это посредник между клиентом и серверов. VPN - это виртуальная сеть, которая для устройства ничем не отличается от локальной. В большинстве случаев VPN определяется ПО как сетевой адаптер, поэтому программа, чей трафик направлен через VPN, не 'знает' об этом. Приложения работают, используя обычные сетевые протоколы. ",
        ],
        isParagraph: true
    },
    {
        heading: "Чем прокси отличается от VPN?",
        answer: [
            "Главное отличие прокси от VPN заключается в том, что VPN защищает весь сетевой трафик, а прокси – только интернет-трафик. Прокси передает запросы, действуя как посредник, а VPN туннелирует всю сетевую активность до уровня операционной системы. Компании используют VPN, чтобы дать доступ сотрудникам к корпоративным ресурсам, не беспокоясь о том, что трафик будет перехвачен или задамплен провайдером.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Cross-Origin Resource Sharing (CORS)? ",
        answer: [
            "Cross-Origin Resource Sharing (CORS) — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать разрешения на доступ к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в данный момент. Говорят, что агент пользователя делает запрос с другого источника (cross-origin HTTP request), если источник текущего документа отличается от запрашиваемого ресурса доменом, протоколом или портом.",
            "В целях безопасности браузеры ограничивают cross-origin запросы, инициируемые скриптами. Например, XMLHttpRequest и Fetch API следуют политике одного источника (same-origin policy). Это значит, что web-приложения, использующие такие API, могут запрашивать HTTP-ресурсы только с того домена, с которого были загружены, пока не будут использованы CORS-заголовки. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое HTTP cookie (куки) и для чего их используют?",
        answer: [
            "HTTP cookie (web cookie, cookie браузера) - это небольшой фрагмент данных, отправляемый сервером на браузер пользователя, который тот может сохранить и отсылать обратно с новым запросом к данному серверу. Это, в частности, позволяет узнать, с одного ли браузера пришли оба запроса (например, для аутентификации пользователя). Они запоминают информацию о состоянии для протокола HTTP, который сам по себе этого делать не умеет.",
            "Cookie используются, главным образом, для: ",
            "1. Управления сеансом (логины, корзины для виртуальных покупок).",
            "2. Персонализации (пользовательские предпочтения).",
            "3. Мониторинга (отслеживания поведения пользователя).",
            "Получив HTTP-запрос, вместе с откликом сервер может отправить заголовок Set-Cookie с ответом. Cookie обычно запоминаются браузером и посылаются в значении заголовка HTTP Cookie с каждым новым запросом к одному и тому же серверу. Можно задать срок действия cookie, а также срок его жизни, после которого cookie не будет отправляться. Также можно указать ограничения на путь и домен, то есть указать, в течении какого времени и к какому сайту оно отсылается. ",
            "Куки можно создавать через JavaScript при помощи свойства Document.cookie. Если флаг HttpOnly не установлен, то и доступ к существующим cookies можно получить через JavaScript. ",
            " - document.cookie = 'yummy_cookie=choco';",
            " - document.cookie = 'tasty_cookie=strawberry';",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Концепция",
        answer: [
            "Конце́пция (от лат. conceptio «система понимания»): комплекс взглядов на что-либо, связанных между собой и образующих единую систему; определённый способ понимания, трактовки каких-либо явлений; основная точка зрения, руководящая идея для их освещения; система взглядов на явления — в мире, природе, обществе; ведущий замысел, конструктивный принцип — в научной, художественной, технической, политической и других видах деятельности....",
            "Термин концепция употребляется также для обозначения ведущего замысла, конструктивного принципа в научной, художественной, технической, политической, юридической и других видах деятельности. ",
            "Примеры концепции: концепция научной диссертации, концепция фильма, концепция продукта.",
            "В более широком понимании концепция - это способ понимания или толкования чего-либо, являющейся составной частью нашего мира. Сюда можно отнести различные теории, гипотезы, взгляды, мнения. Примером в области философии или религии может служить коммунизм, капитализм, гуманизм, язычество, буддизм и т.д. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Концепции программирования: ",
        answer: [
            "1. Процедурное программирование; ",
            "2. Модульное программирование;",
            "3. Объектно-ориентированное программирование;",
            "Порядок перечисления этих концепций соответствует и хронологии их зарождения. ",
        ],
        isParagraph: true
    },
    {
        heading: "Какие существуют основные принципы ООП? ",
        answer: [
            "Базовые принципы ООП: ",
            "1. Абстракция — отделение концепции от ее экземпляра; ",
            "2. Полиморфизм — реализация задач одной и той же идеи разными способами;",
            "3. Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию;",
            "4. Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним.",
            " ",
            " ",
            " ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Первый базовый принцип ООП: абстракция.",
        answer: [
            "Абстракция — отделение концепции от ее экземпляра; ",
            "Слой абстрагирования (или уровень абстракции) — это способ уйти от деталей реализации конкретного множества функций ",
        ],
        isParagraph: true
    },
    {
        heading: "Второй базовый принцип ООП: полиморфизм  ",
        answer: ["Полиморфизм — реализация задач одной и той же идеи разными способами; ", " "],
        isParagraph: true
    },
    {
        heading: "Третий базовый принцип ООП: наследование.",
        answer: [
            "Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию; ",
        ],
        isParagraph: true
    },
    {
        heading: "Четвёртый базовый принцип ООП: инкапсуляция  ",
        answer: ["Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним. "],
        isParagraph: true
    },
    {
        heading: "Что такое SOLID (объектно-ориентированное программирование)?",
        answer: [
            "SOLID (сокр. от англ. single responsibility, open-closed) в программировании — мнемонический акроним, пять основных принципов объектно-ориентированного программирования и проектирования. Принципы SOLID — это руководства, которые также могут применяться во время работы над существующим программным обеспечением для его улучшения - например для удаления «дурно пахнущего кода». ",
            "Избавиться от 'признаков плохого проекта' помогают следующие пять принципов SOLID: ",
            "1. S - Принцип единственной ответственности (The Single Responsibility Principle) каждый класс выполняет лишь одну задачу.",
            "2. O - Принцип открытости/закрытости (The Open Closed Principle) «программные сущности должны быть открыты для расширения, но закрыты для модификации.»",
            "3. L - Принцип подстановки Барбары Лисков (The Liskov Substitution Principle) «объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.» См. также контрактное программирование. Наследующий класс должен дополнять, а не изменять базовый.",
            "4. I - Принцип разделения интерфейса (The Interface Segregation Principle) «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения.»",
            "5. D - Принцип инверсии зависимостей (The Dependency Inversion Principle) «Зависимость на Абстракциях. Нет зависимости на что-то конкретное.» ",
        ],
        isParagraph: true
    },
    {
        heading: "Мнемоника, акроним.",
        answer: [
            "Понимание мнемоники ",
            "1. Мнемоника - это устройство памяти, предназначенное для помощи людям, обычно студентам, с трудной для восприятия информации. Он использует связь между предшествующими знаниями и новыми понятиями через вербальные, визуальные и акустические подсказки. Акронимы могут также быть мнемоникой наряду с рифмами, ключевыми словами и ассоциацией картинок. Его можно формально преподавать, или каждый студент может развить свою собственную мнемонику, чтобы начать свою память. ",
            "2. Взято с греческого слова mnemonikos значение, связанное в объем памяти, мнемоника помогает в качестве помощника искусственной памяти, когда естественная неудача или затрудняет запоминание сложной информации. Это может быть что-то вроде использования суставов, чтобы помнить количество дней в каждом месяце или уникальную строку слов для запоминания планет в правильном порядке. ",
            "Что такое Акроним?",
            "1. Что такое Акроним? Подобно аббревиатуре, аббревиатура формируется путем взятия первых букв каждого слова и создания другого слова, которое поможет вам вспомнить слово / слова, которые вы хотите запомнить. Последовательность букв важна в аббревиатуре. Акронимы записываются только в прописных буквах и обычно могут быть объявлены как новое слово. Возможно, самым известным акронимом является POTUS - президент Соединенных Штатов. Общие акронимы - синдром приобретенного СПИДа - синдром дефицита иммунитета, СТРАНИЦА - шлюз общественного доступа для энергетики и науки и СААРК - Ассоциация региональных стран Южной Азии. Хотя большинство акронимов можно выразить как новые слова, возможно, что некоторые аббревиатуры не могут. ",
            "Насколько они разные? ",
            "1. Хотя мнемоники не являются аббревиатурами, акронимы - это тип мнемоники.",
            "2. Хотя акронимы состоят из первых букв всех слов в последовательном порядке, мнемоники находятся в форме рифмованных слов или поддельных имен.",
            "3. Акронимы чаще всего выражаются как другое слово, в то время как мнемоника не может быть.",
            "4. Акронимы, как правило, запоминают строку слов, которые составляют название организации или болезни. Мнемоника используется для запоминания чего-либо.",
            "Итак, в заключение можно сказать, что хотя и мнемоника, и акронимы приводят к увеличению памяти, они различаются по форме и структуре. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Babel и для чего он используется?",
        answer: [
            "Babel.JS – это транспайлер, переписывающий код на ES-2015 в код на предыдущем стандарте ES5. ",
            "Обычно Babel.JS работает на сервере в составе системы сборки JS-кода (например webpack или brunch) и автоматически переписывает весь код в ES5. ",
            "Настройка такой конвертации тривиальна, единственно – нужно поднять саму систему сборки, а добавить к ней Babel легко, плагины есть к любой из них. ",
            "Конфигурация Babel прописывается в файле babel.config.js, либо в .babelrc для настроек одного пакета, а также в package.json или .babelrc.js. ",
            "Пример конфига в babel.config.js: ",
            "-- ",
            "module.exports = function (api) { ",
            " - api.cache(true);",
            " - const presets = [ ... ];",
            " - const plugins = [ ... ];",
            " - return {",
            " - - presets,",
            " - - plugins",
            " - };",
            "}",
        ],
        isParagraph: true
    },
    {
        heading: "Для чего используется WebSocket? В чем принцип его работы? ",
        answer: [
            "Протокол WebSocket («веб-сокет»), описанный в спецификации RFC 6455, обеспечивает возможность обмена данными между браузером и сервером через постоянное соединение. Данные передаются по нему в обоих направлениях в виде «пакетов», без разрыва соединения и дополнительных HTTP-запросов. ",
            "Чтобы открыть веб-сокет-соединение, нам нужно создать объект new WebSocket, указав в url-адресе специальный протокол ws:  ",
            " let socket = new ",
            "WebSocket('ws://javascript.info'); ",
            "Как только объект WebSocket создан, мы должны слушать его события. Их всего 4: ",
            "1. open – соединение установлено,",
            "2. message – получены данные,",
            "3. error – ошибка,",
            "4. close – соединение закрыто.",
            "----------------------------------------------------------------- ",
            "Вот пример: ",
            "let socket = new WebSocket('wss://javascript.info/article/websocket/demo/hello'); ",
            "-- ",
            "1. socket.onopen = function(e) { ",
            " - alert('[open] Соединение установлено');",
            " - alert('Отправляем данные на сервер');",
            " - socket.send('Меня зовут Джон');",
            "}; ",
            "-- ",
            "2. socket.onmessage = function(event) {",
            " - alert(`[message] Данные получены с сервера: ${event.data}`);",
            "}; ",
            "-- ",
            "3. socket.onclose = function(event) { ",
            " - if (event.wasClean) {",
            " - - alert(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);",
            " - } else {",
            " - - // например, сервер убил процесс или сеть недоступна",
            " - - // обычно в этом случае event.code 1006",
            " - - alert('[close] Соединение прервано');",
            " - }",
            "}; ",
            "-- ",
            "4. socket.onerror = function(error) { ",
            " - alert(`[error] ${error.message}`);",
            "}; ",
            "-- ",
            "Вызов socket.send(body) принимает body в виде строки или любом бинарном формате включая Blob, ArrayBuffer и другие. Дополнительных настроек не требуется, просто отправляем в любом формате. При получении данных, текст всегда поступает в виде строки. А для бинарных данных мы можем выбрать один из двух форматов: Blob или ArrayBuffer. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Веб-компоненты и какие технологии в них используются?",
        answer: [
            "Веб-компоненты — технология, которая позволяет создавать многократно используемые компоненты в веб-документах и веб-приложениях. Веб-компоненты поддерживаются веб-браузерами напрямую и не требуют дополнительных библиотек для работы. ",
            "Веб-компоненты включают четыре технологии, каждая из которых может использоваться отдельно от других: ",
            "1. Custom Elements — API для создания собственных HTML элементов.",
            "2. HTML Templates — тег позволяет реализовывать изолированные DOM-элементы.",
            "3. Shadow DOM — изолирует DOM и стили в разных элементах.",
            "4. HTML Imports — импорт HTML документов.",
        ],
        isParagraph: true
    },
    {
        heading: " ",
        answer: [" ", " ", " ", " ", " ", " ", " ", " ", " "],
        isParagraph: true
    },
    {
        heading: " ",
        answer: [" ", " ", " ", " ", " ", " ", " ", " ", " "],
        isParagraph: true
    },
    {
        heading: " ",
        answer: [" ", " ", " ", " ", " ", " ", " ", " ", " "],
        isParagraph: true
    },
];
