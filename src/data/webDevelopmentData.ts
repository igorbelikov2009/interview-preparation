/* eslint-disable no-template-curly-in-string */
import { ILinkInfo, IObjectHeadingAnswers } from "../models/types";

export const linksWebDevelopment: ILinkInfo[] = [
  {
    href: "https://htmlacademy.ru/blog/boost/frontend/semantics",
    title: "Семантическая вёрстка",
  },
  {
    href: "https://imajor.ru/glossary/terms/krossbrauzernost.18/",
    title: "Кроссбраузерность",
  },
  {
    href: "https://jazzteam.org/ru/technical-articles/overview-of-approaches-and-css-frameworks-for-adaptive-web-page-layout/",
    title: "Адаптивная верстка сайтов: обзор подходов и CSS фреймворков",
  },
  {
    href: "https://mailsgun.ru/%D1%81%D0%BB%D0%BE%D0%B2%D0%B0%D1%80%D0%B8%D0%BA-%D0%B0%D0%B9%D1%82%D0%B8%D1%88%D0%BD%D0%B8%D0%BA%D0%B0-%D0%B8%D0%BB%D0%B8-%D1%87%D1%82%D0%BE-%D0%B3%D0%B4%D0%B5-%D0%BA%D1%83%D0%B4%D0%B0-%D1%87/",
    title: "Словарик айтишника или Что? Где? Куда? Часть 1",
  },
  {
    href: "https://fixer.io/",
    title: "Иностранная валюта курсы и валюта конверсионный JSON-API",
  },
  {
    href: "https://apilayer.com/account",
    title: "Curated API Marketplace. Кураторская торговая площадка API",
  },
  {
    href: "https://apilayer.com/marketplace/currency_data-api",
    title: "Currency Data API. API данных валюты",
  },
  {
    href: "https://apilayer.com/marketplace/exchangerates_data-api",
    title: "Exchange Rates Data API. API данных обменных курсов",
  },
  {
    href: "https://jsonplaceholder.typicode.com/",
    title: "{JSON} Placeholder",
  },
  {
    href: "https://dwstroy.ru/stail/plaginy-rasshireniya/emmet-shpargalka/ ",
    title: "EMMET ШПАРГАЛКА HTML, CSS. EMMET ШПАРГАЛКА ДЛЯ МОЛНИЕНОСНОСТНОЙ ВЕРСТКИ",
  },
  {
    href: "https://axios-http.com/ru/",
    title: "Axios - простой HTTP-клиент для браузера и node.js на основе Promise.",
  },
  {
    href: "https://dev.to/mperon/axios-error-handling-like-a-boss-333d",
    title: "Axios и обработка ошибок как",
  },
  {
    href: "https://www.digitalocean.com/community/tutorials/react-axios-react-ru",
    title: "Использование Axios с React",
  },
  {
    href: "https://www.youtube.com/watch?v=ltn9QoBCJkU&t=9s",
    title: "Axios + TS. Axios от А до Я. Полный курс в React приложении. ",
  },
  {
    href: "https://www.youtube.com/watch?v=3BdWl6hcSWs",
    title: "VS Code плагины 2023. VS Code Plugins 2023",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/708",
    title: "Webpack. Часть 1 из 2. Точки входа и выхода, плагины webpack, модули и загрузчики",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/709",
    title: "Webpack. Часть 2 из 2. Загрузка шрифтов, sass-loader, babel-loader и т.д.",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/712",
    title: "Расширение «Prettier — Code formatter» для VS Code",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/713",
    title: "Расширение «ESLint» для VS Code, часть 1 из 2",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/714",
    title: "Расширение «ESLint» для VS Code, часть 2 из 2",
  },
  {
    href: "https://tokmakov.msk.ru/blog/item/711",
    title: "Расширение «Remote — SSH» для VS Code",
  },
  {
    href: "https://tokmakov.msk.ru/github",
    title: "Узелки на память",
  },
  {
    href: "https://atuin.ru/",
    title: "СОЗДАНИЕ И ДОРАБОТКА САЙТОВ БЛОГ И ИНСТРУМЕНТЫ ДЛЯ ВЕБМАСТЕРОВ",
  },
  {
    href: "https://webformyself.com/category/javascriptajax-2/javascriptajax/",
    title: "Статьи по сайтостроению(много)",
  },
  {
    href: "https://developer.mozilla.org/ru/",
    title: "Веб-технологии для разработчиков",
  },
  {
    href: "https://www.figma.com/file/E1ctRoFLkYECcIDJgWDXK8Sv/Web-%E2%80%A2-Alpha?node-id=0%3A1",
    title: "figma.com Alpha",
  },
  {
    href: "https://www.figma.com/file/1ROI5eUMFVLsyKHxRUCwE5/NPF-%E2%80%A2-Renpensions-site?node-id=0%3A1634",
    title: "figma.com NPF",
  },
  {
    href: "https://www.figma.com/file/R82Jy7NiMWrP7VHVn8Paqp/%D0%A6%D0%B0%D1%80%D1%8C-%D0%BB%D0%B5%D0%BD%D0%B4%D0%BE%D1%81-1.1?node-id=216%3A468",
    title: "figma.com Царь-лендос",
  },
  {
    href: "https://www.figma.com/file/8JLUz1mZDIMkE8BvTumzdd/Untitled?node-id=0%3A1",
    title: "figma.com Южный банк",
  },
  {
    href: "https://kolmogorov.pro/what-is-it-babel-chto-takoe-dge-ispolzuyut",
    title: "Что такое Babel и где его используют",
  },
  {
    href: "https://skillbox.ru/media/code/chto_takoe_api/",
    title: "Что такое API",
  },
  {
    href: "https://skillbox.ru/media/code/rest-api-chto-eto-takoe-i-kak-rabotaet/",
    title: "REST API: что это такое и как работает",
  },
  {
    href: "https://htmlacademy.ru/blog/js/linter-es-lint",
    title: "линтер eslint",
  },
  {
    href: "https://htmlacademy.ru/blog/js/type-predicates",
    title: "type predicates в TS.",
  },
  {
    href: "https://htmlacademy.ru/blog/js/automation",
    title: "автоматизация вёрстки. npm, package.json",
  },
  {
    href: "https://htmlacademy.ru/blog/js/patterns",
    title: "паттерны проектирования",
  },
  {
    href: "https://htmlacademy.ru/blog/js/algorithm",
    title: "что такое и зачем нужны алгоритмы",
  },
  {
    href: "https://frontend-stuff.com/blog/graphql/",
    title: "GraphQL.",
  },
  {
    href: "https://ru.hexlet.io/blog/posts/chto-takoe-graphql-s-osnov-do-pervyh-zaprosov",
    title: "Что такое GraphQL: с основ до первых запросов",
  },
  {
    href: "https://habr.com/ru/companies/ruvds/articles/445268/",
    title: "Подробности о GraphQL: что, как и почему",
  },
  {
    href: "https://frontend-stuff.com/blog/npm-scripts/",
    title: "Frontend Stuff. Что такое NPM скрипты и как их можно использовать для автоматизации задач. ",
  },
  {
    href: "https://frontend-stuff.com/blog/npm-tricks/ ",
    title: "Frontend Stuff. 7 простых трюков для более быстрой разработки.",
  },
  {
    href: "https://frontend-stuff.com/blog/simple-tools/",
    title: "Frontend Stuff. Инструменты статического анализа кода: ESLint, Prettier, TypeScript ",
  },
  {
    href: "https://frontend-stuff.com/blog/tags/tools/",
    title: "Frontend Stuff. 7  статей с категорией “Tools” ",
  },
  {
    href: "https://necolas.github.io/normalize.css/",
    title: "Normalize.css ",
  },
  {
    href: "https://temofeev.ru/info/articles/arkhitektura-frontenda-i-kakoy-ona-dolzhna-byt/",
    title: "Архитектура фронтенда и какой она должна быть. FCD - Feature Sliced Design. ",
  },
  {
    href: "https://www.youtube.com/watch?v=c3JGBdxfYcU",
    title: "Архитектура современных FRONTEND приложений. FCD - Feature Sliced Design. Ulbi TV",
  },
  {
    href: "https://feature-sliced.design/docs/get-started/tutorial",
    title: "Feature Sliced Design. FSD official.",
  },
  {
    href: "https://habr.com/ru/companies/inDrive/articles/693768/",
    title: "Feature Sliced Design: эволюция фронтенда для быстрых экспериментов. Хабр.",
  },
  {
    href: "https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase#module-theflatstructure",
    title: "Как организовать кодовую базу React + Redux",
  },
  {
    href: "https://proglib.io/p/modulnaya-arhitektura-chto-kak-i-pochemu-2023-04-04",
    title: "Модульная архитектура: что, как и почему?",
  },
  {
    href: "https://habr.com/ru/companies/yandex/articles/718084/",
    title: "Полное понимание асинхронности в браузере. Цикл событий.",
  },
  {
    href: "https://habr.com/ru/companies/otus/articles/686670/ ",
    title: "10 задач с JavaScript Promise для подготовки к собеседованиям ",
  },
  {
    href: "https://habr.com/ru/articles/681882/",
    title: "Задачи на собеседованиях. Event loop. JS ",
  },
  {
    href: "https://habr.com/ru/articles/726292/",
    title:
      "Как работает веб-браузер. Что происходит после того как пользователь ввел URL в адресную строку браузера и нажал Enter?",
  },
  {
    href: "https://habr.com/ru/companies/oleg-bunin/articles/660687/",
    title: "Как достичь производительного рендеринга в браузере",
  },
  {
    href: "https://habr.com/ru/articles/591381/ ",
    title: "Styled Components — установка, типизация, основы, зависмости, тема, динамическая тема...",
  },
  {
    href: "https://www.figma.com/file/BEpiufYeqNuyyJi0p5BpLD/YouTube-Clone?type=design&node-id=0-1&t=Hd1owZV1w9J611KO-0",
    title: "Клон ютуба на фигме ",
  },
  {
    href: "https://github.com/jamiebuilds/babel-handbook/blob/master/translations/ru/user-handbook.md",
    title: "Babel. Руководство Пользователя ",
  },
  {
    href: "https://habr.com/ru/articles/591381/",
    title: "Styled Components — идеальная стилизация React-приложения. TypeScript ",
  },
  {
    href: "https://webformyself.com/kak-ispolzovat-stilizovannye-komponenty-v-react/",
    title: "Как использовать стилизованные компоненты в React. Styled Components ",
  },
  {
    href: "https://github.dev/YaroslavWeb/plankton-client",
    title: "Приложение - пособие по styled components + TypeScript на github",
  },
  {
    href: "https://www.youtube.com/watch?v=I_tgMaGA5CU&t=71s",
    title: "UI Library with Styled-Components, Storybook, Typescript,",
  },
  {
    href: "https://github.com/styled-components/styled-components ",
    title: "styled components github ",
  },
  {
    href: "https://styled-components.com/docs ",
    title: "Документация styled components",
  },
  {
    href: "https://hello-js.com/articles/themes-in-react-with-typescript-context-hooks/",
    title: "Темы в React с Typescript, Context API, хуки React, переменные CSS",
  },
  {
    href: "https://www.joshwcomeau.com/css/css-variables-for-react-devs/ ",
    title: "Переменные CSS для разработчиков React",
  },
  {
    href: "https://emotion.sh/docs/introduction",
    title: "Пакет @emotion/react",
  },
  {
    href: "https://emotion.sh/docs/typescript ",
    title: "Пакет @emotion/react TypeScript",
  },
  {
    href: "https://www.youtube.com/watch?v=BBRVmHgB2BY",
    title: "CSS переменные. Как использовать при верстке сайта?",
  },
  {
    href: "https://stackoverflow.com/questions/52005083/how-to-define-css-variables-in-style-attribute-in-react-and-typescript",
    title: "Как определить переменные css в атрибуте стиля в React и TypeScript",
  },
  {
    href: "https://doka.guide/tools/rollup/ ",
    title: "Rollup Сборщик проектов JavaScript - замена для webpack. ",
  },
  {
    href: "https://www.youtube.com/watch?v=I_tgMaGA5CU&t=71s ",
    title: "Rollup Сборщик проектов JavaScript - замена для webpack. Youtube ",
  },
  {
    href: " ",
    title: " ",
  },
];

export const arrayWebDevelopment: IObjectHeadingAnswers[] = [
  {
    heading: "БЭМ-методология",
    answer: [
      "БЭМ-методология — это набор правил и рекомендаций по организации работы над проектом. ",
      "БЭМ (Блок, Элемент, Модификатор) — компонентный подход к веб-разработке. В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы любой сложности и повторно использовать существующий код, избегая «Copy-Paste».",
      "Блок - функционально независимый компонент страницы, который может быть повторно использован. Блоки можно вкладывать друг в друга. Допустима любая вложенность блоков.",
      "Элемент - Составная часть блока, которая не может использоваться в отрыве от него. Элементы можно вкладывать друг в друга. Допустима любая вложенность элементов. Элемент — всегда часть блока, а не другого элемента.",
      "Структура полного имени элемента соответствует схеме: имя-блока__имя-элемента. Имя элемента отделяется от имени блока двумя подчеркиваниями (__).",
      "Модификатор - Cущность, определяющая внешний вид, состояние или поведение блока либо элемента.",
      "Какие требования мы сформулировали:",
      "    - Разработчик должен понимать свой код (даже вернувшись к нему через год) и код любого программиста в команде БЭМ-проекта.",
      "    - Любой блок кода может быть использован повторно: необходимо создать общую базу знаний и не писать каждый раз всё с нуля, а использовать готовые наработки.",
      "    - Работая в одной команде, разработчики, менеджеры, дизайнеры и верстальщики должны называть одни и те же вещи одинаково. То есть говорить на одном языке.",
      "    - Команды могут обмениваться специалистами для реализации какой-то конкретной функциональности.",
      "    - Порог входа при переходе на новый проект должен быть снижен за счет одинаковой структуры организации всех БЭМ-проектов и одинаковых правил именования всех сущностей.",
      " ",
    ],
    isParagraph: true,
  },
  {
    heading: "Семантическая вёрстка",
    answer: [
      "Семантическая вёрстка - создание веб-страниц при использовании HTML-тегов в соответствии с их семантикой (предназначением), предполагающее иерархию страницы. Для оформления веб-страниц, написанных в соответствии с семантикой, используются каскадные таблицы стилей (CSS). Стандарт HTML с самого начала включал в себя ряд семантических тегов, но большую популярность семантическая вёрстка получила после начала работ над HTML5.",
      "Семантическая вёрстка — это разметка, которая опирается на смысловое предназначение каждого блока и логическую структуру документа.  ",
    ],
    isParagraph: true,
  },
  {
    heading: "Кроссбраузерность",
    answer: [
      "Кроссбраузерность – это способность веб-ресурса отображаться одинаково и работать во всех популярных браузерах, без перебоев в функционировании и ошибок в верстке, а также с одинаково корректной читабельностью контента. Из-за стремительного развития технологий, сайт рекомендуется делать кроссбраузерным только по отношению к новейшим версиям браузеров:",
      " - Google Chrome. ",
      " - Mozilla Firefox.",
      " - Opera.",
      " - Internet Explorer.",
      " - Netscape.",
      " - Safari.",
      " Стоит отметить, что элементы веб-ресурса не должны быть абсолютно идентичны во всех браузерах, которые существуют на сегодняшний день. Соответствующим можно считать сайт, если:",
      " - информация на странице читабельная;",
      " - сохранена структура;",
      " - нет ошибок в верстке; ",
      " - текст не «накладывается» поверх другого текста и изображений, если только это не предусмотрено автором контента.",
    ],
    isParagraph: true,
  },
  {
    heading: "Фиксированная верстка",
    answer: [
      "Фиксированная верстка (Fixed Layout) — подход создания страниц сайта, которые имеют заданную ширину. Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки. Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.",
      "Пример ниже демонстрирует строгое задание ширины для тега body:",
      "body { width: 1200px }",
    ],
    isParagraph: true,
  },
  {
    heading: "Резиновая верстка",
    answer: [
      "Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).",
      "Примеры использования техник резиновой верстки:",
      " -  body { width: 90% }",
      " -  div { min-width: 320px; max-width: 1200px }",
    ],
    isParagraph: true,
  },
  {
    heading: "Адаптивная верстка",
    answer: [
      "Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например, с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять указанные значения в автоматическом режиме. В примере ниже задается ширина div равная 960px для всех устройств, ширина которых меньше 1200px и 320px для всех устройств, ширина которых меньше 480px.",
      " - @media all and (max-width: 1200px) { div { width: 960px } } ",
      " - @media all and (max-width: 480px) {  div { width: 320px } }",
    ],
    isParagraph: true,
  },
  {
    heading: "Отзывчивая верстка",
    answer: [
      "Отзывчивая верстка (Responsive Layout) — это объединение резиновой и адаптивной вёрстки. При данном подходе используются как медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать, что сайт приспособится к любому устройству.",
      "Ниже задается ширина div равная 50% от размера родительского компонента для всех устройств, ширина которых меньше 1200px и 100% для всех устройств, ширина которых меньше 480px.",
    ],
    isParagraph: true,
  },
  {
    heading:
      "Можете ли вы объяснить разницу между отзывчивым (responsive) сайтом и сайтом, сделанным по принципу mobile-first?",
    answer: [
      "Отзывчивая и mobile-first верстки служат для того, чтобы пользователь мог пользоваться сайтом с разных устройств. Верстка подстраивается под различные размеры экрана, разрешения, контекст использования, механизмы контроля и т.д.",
      "Отзывчивая верстка начинается с верстки десктопной версии сайта. Затем она адаптируется для меньших экранов.",
      "Mobile-first начинается с верстки версии сайта для мобильных устройств.",
    ],
    isParagraph: true,
  },
  {
    heading: "Основные техники реализации сайтов под любое разрешение. Относительные значения",
    answer: [
      "Использование относительных значений позволяет отобразить информацию и компоненты на странице без потери читабельности и удобства просмотра.",
      "Относительные значения для размеров и отступов",
      " Относительные значения можно задавать для width, height, margin, padding и т. д. Самый известный способ задания относительного размера — указание в процентах (%).",
      " Ниже приводится пример задания ширины равной 90% от размера родительского компонента.",
      " body { width: 90% }",
      " При этом значение высчитывается относительно родительского компонента.",
      " Также существуют значения относительно размера экрана:",
      " - vw — 1% ширины окна. При уменьшении ширины окна, уменьшается ширина, высота, шрифт элемента; ",
      " - vh — 1% высоты окна. При уменьшении высоты окна, уменьшается ширина, высота, шрифт элемента;",
      " - vmin — выбирается наименьшее из vw и vh;",
      " - vmax — выбирается наибольшее из vw и vh.",
      " - Ниже рассмотрен пример использования vw и vh. В данном случае ширина и высота тега div будут равны 50% от ширины и высоты экрана соответственно.",
      " div { width: 50vw; height: 50vh }",
    ],
    isParagraph: true,
  },
  {
    heading: "Основные техники реализации сайтов под любое разрешение. Относительные значения для размера шрифта",
    answer: [
      "Существуют следующие относительные значения для шрифтов:",
      " - em — задаёт размер относительно шрифта родителя;",
      " - rem — задаёт размер относительно шрифта html.",
      "Рассмотрим пример: html { font-size: 20px } body { font-size: 1.5em }",
      "Вычислим размер шрифта для тега body. В данном примере размер шрифта для body задается относительно размера html. Таким образом, размер шрифта для body будет равен 30px (20px * 1.5 = 30px).",
      "Также относительные размеры шрифта можно задавать с помощью %, vw, vh и т. д. В следующем примере размер шрифта для body равен 80% от размера шрифта html — 16px.",
      " html {font-size: 20px } ",
      " body { font-size: 80%  } ",
    ],
    isParagraph: true,
  },
  {
    heading: "Основные техники реализации сайтов под любое разрешение. Максимальные и минимальные размеры компонентов",
    answer: [
      "Для задания максимальных и минимальных значений ширины и высоты компонента используются свойства max-width / min-width и max-height / min-height соответственно.",
      "Рассмотрим пример: div { width: 60%; max-width: 500px }",
      "Допустим, что родительским компонентом данного div является body. Тогда, при изменении ширины экрана, ширина данного компонента будет составлять 60% от ширины body. Однако он будет увеличиваться только до величины, определенной в max-width, это 500px. Как только контейнер достигнет этой ширины — он перестанет увеличиваться.",
      "Использование медиа-запросов",
    ],
    isParagraph: true,
  },
  {
    heading: "HTML - Язык программирования",
    answer: [
      "HTML — стандартизированный язык гипертекстовой разметки документов для просмотра веб-страниц в браузере. Веб-браузеры получают HTML документ от сервера по протоколам HTTP/HTTPS или открывают с локального диска, далее интерпретируют код в интерфейс, который будет отображаться на экране монитора.",
    ],
    isParagraph: true,
  },
  {
    heading: "CSS",
    answer: [
      "Каскадная таблица стилей (CSS) формально является набором команд и инструментов для работы с внешним видом веб-страницы. Она делает интерфейс более восприимчивым и приятным – огромное количество сайтов работает на основе связки HTML и CSS. Как и в случае с языками программирования, существует множество готовых библиотек CSS, созданных профессионалами для удобства работы со стилями.",
    ],
    isParagraph: true,
  },
  {
    heading: "Что такое DOM?",
    answer: [
      "DOM (Document Object Model, объектная модель документа) — это программный интерфейс который описывает структуру HTML документов, соотношение элементов, их вложенность друг в друга. ",
      "Главное: DOM позволяет манипулировать элементами через javascript.",
    ],
    isParagraph: true,
  },
  {
    heading: "Что такое API",
    answer: [
      "API - Интерфейс прикладного программирования. Он обеспечивает взаимодействие между двумя системами. Это как винтик, который связывает две детали. Соответственно API могут быть не только в ВЭБ - приложении, они могут быть и в микроконтроллерах, и в каких то десктопных приложениях и т.д. ",
    ],
    isParagraph: true,
  },
  {
    heading: "Десктопные приложения",
    answer: [
      "Десктопные приложения – это программы, логика работы которых требует наличия оператора (человека работающего с программой), содержащие в себе всю полную функциональность и способные работать отдельно на любой машине изолированно от других приложений. Microsoft Word, Excel, Блокнот, однопользовательские игры – всё это примеры десктопных приложений. Для их работы необходимы лишь достаточные аппаратные ресурсы компьютера, само приложение и набор библиотек, содержащих функции для работы с приложением.",
      "Десктопные приложения могут быть также и многопользовательскими. Например, редактор файлов который в зависимости от логина и пароля, введенных при запуске, будет давать доступ к различным файлам. И программа и файлы находятся на одном компьютере, просто производится локальное разграничение доступа для разных пользователей.",
    ],
    isParagraph: true,
  },
  {
    heading: "Какая разница между элементами span и div?",
    answer: [
      " - span — это строчный (inline) элемент",
      " - div — это блочный (block) элемент.",
      "Элементы div нужно использовать для оформления разделов документа. А элементы span — в роли контейнеров для небольших объёмов текста, для изображений и других подобных элементов страниц.",
      "Надо отметить, что нельзя помещать блочные элементы в строчные.",
    ],
    isParagraph: true,
  },
  {
    heading: "Что такое мета-теги?",
    answer: [
      "Мета-теги — это теги, находящиеся в теге <head> и описывающие содержимое страницы. Мета-теги не выводятся на странице. Они имеются лишь в её коде.",
    ],
    isParagraph: true,
  },
  {
    heading: "Концепция",
    answer: [
      "Конце́пция (от лат. conceptio «система понимания»): комплекс взглядов на что-либо, связанных между собой и образующих единую систему; определённый способ понимания, трактовки каких-либо явлений; основная точка зрения, руководящая идея для их освещения; система взглядов на явления — в мире, природе, обществе; ведущий замысел, конструктивный принцип — в научной, художественной, технической, политической и других видах деятельности....",
      "Термин концепция употребляется также для обозначения ведущего замысла, конструктивного принципа в научной, художественной, технической, политической, юридической и других видах деятельности. ",
      "Примеры концепции: концепция научной диссертации, концепция фильма, концепция продукта.",
      "В более широком понимании концепция - это способ понимания или толкования чего-либо, являющейся составной частью нашего мира. Сюда можно отнести различные теории, гипотезы, взгляды, мнения. Примером в области философии или религии может служить коммунизм, капитализм, гуманизм, язычество, буддизм и т.д. ",
      " ",
    ],
    isParagraph: true,
  },
  {
    heading: "Концепции программирования: ",
    answer: [
      "1. Процедурное программирование; ",
      "2. Модульное программирование;",
      "3. Объектно-ориентированное программирование;",
      "Порядок перечисления этих концепций соответствует и хронологии их зарождения. ",
    ],
    isParagraph: true,
  },
  {
    heading: "Какие существуют основные принципы ООП? ",
    answer: [
      "Базовые принципы ООП: ",
      "1. Абстракция — отделение концепции от ее экземпляра; ",
      "2. Полиморфизм — реализация задач одной и той же идеи разными способами;",
      "3. Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию;",
      "4. Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним.",
      " ",
    ],
    isParagraph: true,
  },
  {
    heading: "Первый базовый принцип ООП: абстракция.",
    answer: [
      "Абстракция — отделение концепции от ее экземпляра; ",
      "Слой абстрагирования (или уровень абстракции) — это способ уйти от деталей реализации конкретного множества функций ",
    ],
    isParagraph: true,
  },
  {
    heading: "Второй базовый принцип ООП: полиморфизм  ",
    answer: ["Полиморфизм — реализация задач одной и той же идеи разными способами; ", " "],
    isParagraph: true,
  },
  {
    heading: "Третий базовый принцип ООП: наследование.",
    answer: [
      "Наследование — способность объекта или класса базироваться на другом объекте или классе. Это главный механизм для повторного использования кода. Наследственное отношение классов четко определяет их иерархию; ",
    ],
    isParagraph: true,
  },
  {
    heading: "Четвёртый базовый принцип ООП: инкапсуляция  ",
    answer: ["Инкапсуляция — размещение одного объекта или класса внутри другого для разграничения доступа к ним. "],
    isParagraph: true,
  },
  {
    heading: "Что такое SOLID (объектно-ориентированное программирование)?",
    answer: [
      "SOLID (сокр. от англ. single responsibility, open-closed) в программировании — мнемонический акроним, пять основных принципов объектно-ориентированного программирования и проектирования. Принципы SOLID — это руководства, которые также могут применяться во время работы над существующим программным обеспечением для его улучшения - например для удаления «дурно пахнущего кода». ",
      "Избавиться от 'признаков плохого проекта' помогают следующие пять принципов SOLID: ",
      "1. S - Принцип единственной ответственности (The Single Responsibility Principle) каждый класс выполняет лишь одну задачу.",
      "2. O - Принцип открытости/закрытости (The Open Closed Principle) «программные сущности должны быть открыты для расширения, но закрыты для модификации.»",
      "3. L - Принцип подстановки Барбары Лисков (The Liskov Substitution Principle) «объекты в программе должны быть заменяемыми на экземпляры их подтипов без изменения правильности выполнения программы.» См. также контрактное программирование. Наследующий класс должен дополнять, а не изменять базовый.",
      "4. I - Принцип разделения интерфейса (The Interface Segregation Principle) «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения.»",
      "5. D - Принцип инверсии зависимостей (The Dependency Inversion Principle) «Зависимость на Абстракциях. Нет зависимости на что-то конкретное.» ",
    ],
    isParagraph: true,
  },
  {
    heading: "Мнемоника, акроним.",
    answer: [
      "Понимание мнемоники ",
      "1. Мнемоника - это устройство памяти, предназначенное для помощи людям, обычно студентам, с трудной для восприятия информации. Он использует связь между предшествующими знаниями и новыми понятиями через вербальные, визуальные и акустические подсказки. Акронимы могут также быть мнемоникой наряду с рифмами, ключевыми словами и ассоциацией картинок. Его можно формально преподавать, или каждый студент может развить свою собственную мнемонику, чтобы начать свою память. ",
      "2. Взято с греческого слова mnemonikos значение, связанное в объем памяти, мнемоника помогает в качестве помощника искусственной памяти, когда естественная неудача или затрудняет запоминание сложной информации. Это может быть что-то вроде использования суставов, чтобы помнить количество дней в каждом месяце или уникальную строку слов для запоминания планет в правильном порядке. ",
      "Что такое Акроним?",
      "1. Что такое Акроним? Подобно аббревиатуре, аббревиатура формируется путем взятия первых букв каждого слова и создания другого слова, которое поможет вам вспомнить слово / слова, которые вы хотите запомнить. Последовательность букв важна в аббревиатуре. Акронимы записываются только в прописных буквах и обычно могут быть объявлены как новое слово. Возможно, самым известным акронимом является POTUS - президент Соединенных Штатов. Общие акронимы - синдром приобретенного СПИДа - синдром дефицита иммунитета, СТРАНИЦА - шлюз общественного доступа для энергетики и науки и СААРК - Ассоциация региональных стран Южной Азии. Хотя большинство акронимов можно выразить как новые слова, возможно, что некоторые аббревиатуры не могут. ",
      "Насколько они разные? ",
      "1. Хотя мнемоники не являются аббревиатурами, акронимы - это тип мнемоники.",
      "2. Хотя акронимы состоят из первых букв всех слов в последовательном порядке, мнемоники находятся в форме рифмованных слов или поддельных имен.",
      "3. Акронимы чаще всего выражаются как другое слово, в то время как мнемоника не может быть.",
      "4. Акронимы, как правило, запоминают строку слов, которые составляют название организации или болезни. Мнемоника используется для запоминания чего-либо.",
      "Итак, в заключение можно сказать, что хотя и мнемоника, и акронимы приводят к увеличению памяти, они различаются по форме и структуре. ",
      " ",
    ],
    isParagraph: true,
  },
  {
    heading: "Что такое Babel и для чего он используется?",
    answer: [
      "Babel — это универсальный многоцелевой компилятор для JavaScript. С его помощью можно использовать и создавать следующее поколение JavaScript, а также следующее поколения инструментов JavaScript. ",
      "Babel — это транспилятор, обладающий огромными возможностями. В частности, он умеет преобразовывать LESS в CSS, JSX в JS, TypeScript в JS. ",
      "Транспайлер - это программа, позволяющая менять исходный код одной программы на эквивалентный исходный код на другом языке. В случае с Babel, он переписывает современный Javascript на старый. Babel это не просто транспайлер, это лучший друг разработчика. ",
      " ",
      "JavaScript постоянно развивается, разрастается новыми спецификациями и предложениями, новыми функции появляются буквально каждый день. Обновления языка Javascript происходит каждый год",
      "Не все современные браузеры могут или хотят идти в ногу с этими изменениями. А еще, к этому прибавляем старые браузеры, которые больше никогда не обновятся. Но их все равно пока используют, привет Internet Explorer.",
      "Вот здесь и нужен Babel. Он помогает не ждать обновлений браузеров, а сразу использовать всю мощь современных стандартов Javascript. ",
    ],
    isParagraph: true,
  },
  {
    heading: "Инкапсуляция (от лат. in capsule — в оболочке)  ",
    answer: [
      "Инкапсуляция (от лат. in capsule — в оболочке) — это заключение данных и функциональности в оболочку. В объектно-ориентированном программировании в роли оболочки выступают классы: они не только собирают переменные и методы в одном месте, но и защищают их от вмешательства извне (сокрытие). ",
      "Процессы, происходящие под капотом автомобиля, скрыты от водителя, а управление осуществляется через удобный и безопасный «интерфейс» — руль и педали. Такой же принцип лежит в основе ООП. ",
      "Методы позволяют контролировать обращение к данными и предотвратить их удаление или некорректное изменение. Например, можно запретить присваивать полю «возраст» объекта «Пользователь» число большее 130. Другими словами, это такая «защита от дурака» в программировании.",
      " ",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Что такое инкапсулировать?",
    answer: [
      "Инкапсулировать - значит скрывать. ",
      "Идея инкапсуляции состоит в том, что вы скрываете реализацию ваших классов от пользователей (и программистов), предоставляя им для работы интерфейсы ваших классов. Также это подразумевает скрытие данных при помощи идентификаторов доступа (public, private, protected). ",
      " ",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Зачем делать eject?",
    answer: ["На случай, если необходимо модифицировать конфигурацию проекта (webpack, babel)", " "],
    isParagraph: true,
  },
  {
    heading: "Что такое шаблоны проектирования?",
    answer: [
      "Шаблоны проектирования - это повторно используемые фрагменты кода, используемые для решения распространенных программных проблем. Ваши проекты будут создавать более модульное, масштабируемое и оптимизированное программное обеспечение, если вы будете использовать шаблоны проектирования. Поскольку вы сможете сразу определить шаблон разработки кода, понять этот код будет проще",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Что такое миксины?",
    answer: [
      "При расширении функциональности в JavaScript мы можем рассмотреть наследование от Mixins в качестве стратегии. Каждый вновь созданный объект имеет прототип, который позволяет объекту наследовать дополнительные свойства. Возможность определять свойства для любого количества экземпляров объекта даже более важна, чем возможность наследования от других прототипов объектов. Вы можете использовать эту информацию для поощрения повторного использования функций.",
      "Миксины с наименьшей возможной сложностью позволяют объектам обмениваться или заимствовать функциональные возможности. Шаблон позволяет нам использовать достаточно гибкий подход для совместного использования функциональности не только одного микширования, но фактически нескольких посредством множественного наследования, потому что он хорошо работает с объектными прототипами JavaScript. Миксины помогают системе увеличить повторное использование функций и уменьшить их повторяемость.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Что такое JSON?",
    answer: [
      "JSON — это популярный формат текстовых данных, который используется для обмена данными в современных веб - и мобильных приложениях",
      "Кроме того, JSON используется для хранения неструктурированных данных в файлах журналов или базах данных NoSQL, таких как Microsoft Azure Cosmos DB. Многие веб-службы REST возвращают результаты в формате текста JSON или принимают данные в формате JSON",
      "JSON описывает структуры данных и объекты с помощью своего текстового стандарта. Вы можете время от времени использовать JSON для программирования на стороне клиента или сервера.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Что такое утверждения в программировании?",
    answer: [
      "Каждую проверку в тестировании принято называть утверждением. Утверждения — это ключевая часть тестов. Именно они проверяют функциональность кода.",
      "Утверждение (англ. assertion) в программировании — оператор, в котором предикат (логическое выражение) должен иметь всегда истинное значение в данной части кода. Программы проверяют утверждения, фактически оценивая предикат во время выполнения кода, и, если в действительности предикат ложен, программа преднамеренно останавливается или генерирует исключение.",
      "Утверждения могут делать код удобнее для прочтения, помогать компилятору скомпилировать код или обнаружить дефекты в программе.",
      "--",
      "Утверждения - это условия, которые должны быть выполнены, чтобы программа функционировала должным образом. Утверждения обычно используются в качестве предварительных условий до или после вызова функции или метода.",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Что такое rest в программировании?",
    answer: [
      "REST API — это архитектурный подход, который устанавливает ограничения для API: как они должны быть устроены и какие функции поддерживать. Это позволяет стандартизировать работу программных интерфейсов, сделать их более удобными и производительными.",
      "Слово REST — акроним от Representational State Transfer, что переводится на русский как «передача состояния представления», «передача репрезентативного состояния» или «передача „самоописываемого“ состояния».",
      "REST API — не протокол, а простой список рекомендаций, которым можно следовать или не следовать.",
      "Как работает REST API: 6 принципов архитектуры.",
      "Всего в REST есть шесть требований к проектированию API. Пять из них обязательные, одно — опциональное:",
      "1. Клиент-серверная модель (client-server model).",
      "2. Отсутствие состояния (statelessness).",
      "3. Кэширование (cacheability).",
      "4. Единообразие интерфейса (uniform interface).",
      "5. Многоуровневая система (layered system).",
      "6. Код по требованию (code on demand) — необязательно.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Клиент-серверная модель",
    answer: [
      "Это требование отделяет друг от друга два понятия: клиент и сервер.",
      "Сервер — программа, в которой хранятся и обрабатываются ресурсы. Сервер может располагаться на одном или нескольких компьютерах; но даже в одном компьютере может быть несколько виртуальных серверов. Допустим, изначально HTML-код этой статьи хранился где-то на серверах Skillbox.",
      "Клиент — программа, которая запрашивает у сервера доступ к ресурсам. Для этого она использует API. Когда ваш браузер запрашивает у сервера Skillbox эту веб-страницу, он выступает в роли клиента.",
      "Получается структура, при которой клиент направляет к серверу запрос, а в ответ получает ресурсы. Такое разделение позволяет создавать клиент и сервер независимо друг от друга, что ускоряет и упрощает разработку.",
      "Представим, что вы делаете сервис для учёта деловых переписок. Сами переписки хранятся на сервере, а доступ к ним можно получить из мобильного приложения. Оно не будет хранить никаких данных — только отправлять запросы на сервер, получать ответы и отображать их на экране смартфона.",
      "Если вы когда-нибудь захотите полностью изменить логику работы сервера, то это никак не отразится на мобильном приложении. До тех пор, пока они понимают запросы и ответы друг друга, конечно.",
      "А чтобы дать доступ к сервису из десктопного приложения и личного сайта, достаточно написать два новых клиента — а на сервере ничего менять не надо. Такая вот гибкость.",
      "-",
      "Ресурсы — это любые данные: текст, изображение, видео, аудио, целая программа.",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Отсутствие состояния",
    answer: [
      "Это значит, что на сервере не хранится никаких данных о прошлых взаимодействиях с клиентом — каждый запрос должен содержать всю информацию для его обработки.",
      "Например, кто-то запросил последнее сообщение от ООО «Рога и копыта». В этом запросе содержится вся информация, которая нужна серверу, чтобы дать корректный ответ.",
      "Если клиент потом хочет получить предпоследнее сообщение, то он не может просто сказать: «Дай мне соседний ресурс» — ему нужно заново составить полный запрос по всем правилам.",
      "Это снижает нагрузку на сервер, что особенно полезно, если к нему подключено одновременно много клиентов. Не нужно хранить дополнительную информацию о прошлых обращениях каждого из них. Достаточно обработать каждый запрос в отдельности.",
      "Даже если какой-то из предыдущих запросов потеряется, это не сломает логику взаимодействия клиента и сервера, потому что каждый запрос самодостаточен.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Кэширование - сохранение части данных у клиента или на промежуточных серверах",
    answer: [
      "Иногда клиент запрашивает с сервера одни и те же данные по несколько раз — например, вы постоянно обращаетесь к какому-нибудь важному письму в сервисе для учёта деловых переписок.",
      "Если при каждом таком запросе сервер будет с нуля собирать нужные данные и отправлять их клиенту, нагрузка на систему повысится — особенно когда таких повторов много. Решением проблемы в REST API стало кэширование, то есть сохранение части данных у клиента или на промежуточных серверах.",
      "Однако тут тоже важно подойти к делу без излишнего фанатизма и не кэшировать всю информацию подряд. Во-первых, для этого потребовались бы слишком большие объёмы памяти. Во-вторых, какие-то данные (скажем, количество исходящих писем) со временем могут устаревать — зачем же держать этот неактуальный хлам в кэше? Именно поэтому в каждом ответе сервера на запрос есть пометка о том, можно ли его кэшировать.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Единообразие интерфейса",
    answer: [
      "Должен быть единый способ обращения к каждому ресурсу. Например, мы хотим добавить в наш сервис новую функциональность для просмотра данных о денежных переводах. Понятно, что логика интерфейса для обращения к ним должна быть такой же, как и для всего, что было в сервисе раньше.",
      "Файлы обычно передаются клиенту не в том виде, в котором хранятся на сервере. В вебе их часто преобразуют в JSON или XML и только потом отправляют клиенту. Ответ на запросы к новому ресурсу должен приходить в том же формате, что и к старым, и сразу же содержать дополнительную информацию: что разрешается делать с ресурсом, можно ли его изменять и удалять на сервере и так далее.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Многоуровневая система",
    answer: [
      "До сих пор мы рассматривали сервер как единую сущность. Но его структура куда сложнее. Между ним и клиентом есть несколько промежуточных узлов, выполняющих вспомогательные функции, — прокси-серверы.",
      "Они используются для кэширования, обеспечения безопасности, дополнительной обработки данных. Если основных серверов несколько, то дополнительные серверы-балансировщики могут распределять нагрузку между ними и решать, в какой из них направлять запрос.",
      "Никто из участников цепочки не знает всего пути, который проходит запрос, — только своих «соседей» справа и слева. Ни клиент, ни один из прокси-серверов не знает, к кому он обращается — к основному сервису или к другому прокси. В REST API это работает в обе стороны: никакие серверы (ни основные, ни прокси) не знают, кому отправляют ответ и уходит ли он куда-то дальше.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "REST API. Код по требованию (необязательно)",
    answer: [
      "Этот принцип означает, что сервер в ответ на запрос может отправить исходный код, который выполняется уже на стороне клиента. Благодаря этому можно передавать целые сценарии. Например, динамические элементы пользовательского интерфейса, написанные на JavaScript",
      "В REST API требование необязательно, потому что не всем сайтам и сервисам нужно умение работать с готовыми скриптами.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Методы REST API",
    answer: [
      "Так как REST — архитектурный подход, а не протокол, в нём не заложено никаких конкретных методов. Но чаще всего его применяют вместе со стандартом HTTP, в котором заложены собственные методы.",
      "Если кратко, то в HTTP прописан набор действий, который можно описать аббревиатурой CRUD: create — «создать», read — «прочитать», update — «обновить», delete — «удалить».",
      "Для каждого такого действия существуют один или несколько глаголов — это и есть методы. Например, GET для чтения, а PUT и PATCH — для разных видов обновления. Глагол-метод применяется к URL-адресу нужного ресурса, который в «предложении» выполняет роль существительного.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Абревиатура CRUD - это набор действий в стандарте HTTP:",
    answer: [
      "    *  create — «создать», ",
      "    *  read — «прочитать»,  ",
      "    *  update — «обновить», ",
      "    *  delete — «удалить». ",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Для чего используют REST API",
    answer: [
      "Архитектурный стиль REST — самый распространённый подход к проектированию API. Вот в каких случаях его применяют:",
      "- пропускная способность соединения с сервером ограничена;",
      "- нужно соединить мобильные приложения с серверными;",
      "- проект разбит на микросервисы;",
      "- сервис предоставляет свои возможности другим разработчикам;",
      "- используется AJAX;",
      "- известно, что систему нужно будет масштабировать.",
      "",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Основные отличия REST API:",
    answer: [
      "1. REST — это архитектурный стиль API. Он не ограничивается никакими протоколами и не имеет собственных методов. Но обычно в RESTful-сервисах используют стандарт HTTP, а файлы передают в формате JSON или XML.",
      "2. Есть шесть принципов, на которых строится REST: клиент-серверная модель, отсутствие состояния, кэширование, единообразие интерфейса, многоуровневая система, код по требованию. Последний из них необязателен.",
      "3. REST-подход к архитектуре позволяет сделать сервисы отказоустойчивыми, гибкими и производительными, а при их масштабировании и внесении изменений не возникает больших сложностей.",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Какие правила применяются для объявления параметров Rest?",
    answer: [
      "Вот три правила для объявления параметров Rest:",
      "- В функции разрешен только один параметр rest.",
      "- Это должен быть тип массива.",
      "- Это должен быть последний аргумент в списке параметров.",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Идентификация, аутентификация и авторизация в IT: в чём разница",
    answer: [
      "Авторизацию и аутентификацию легко спутать, но это разные вещи. Их нужно различать и понимать, как использовать, чтобы обезопасить свои данные или данные пользователей.",
      " ",
      "👉 Аутентификация — это проверка, что вы действительно тот человек, за которого себя выдаёте. ",
      "Вот простой пример из жизни: представьте, что вам написал друг и попросил занять денег до понедельника. Чтобы убедиться, что это не мошенник, вы проводите аутентификацию — звоните приятелю. И если ваш друг подтвердит, что это ему нужны деньги, он пройдёт проверку.",
      " ",
      "👉 Авторизация — это получение права доступа к чему-то. Например, ваш друг получит доступ к деньгам и потратит их. ",
      " ",
      "На самом деле в цепочке проверки есть ещё один пункт — 👉 идентификация, то есть распознавание пользователя по его идентификатору. Она помогает понять, для какого субъекта будет выполняться проверка.",
      " ",
      "Допустим, вы хотите открыть свою страницу в соцсетях. Сначала вводите логин — система опознаёт, что вы пытаетесь войти под именем BossKeks. Это идентификация. Затем вам нужно доказать, что вы тот, за кого себя выдаёте. Для этого вы вводите пароль и нажимаете кнопку «Отправить». Выполняется аутентификация: ваши данные сверяются с паролем, который хранится на сервере. Если всё совпадёт, выполнится авторизация. Вы получите доступ к своему аккаунту и сможете отправлять сообщения, загружать фото или писать комментарии к постам.",
      "Дополнительные проверки при аутентификации.",
      "От способа аутентификации зависит, насколько защищены данные пользователей. Самый простой способ защиты — традиционная или однофакторная аутентификация, когда вы проходите одну проверку. Например, вы можете ввести пароль, чтобы попасть в личный кабинет в интернет-магазине. По биометрии, отпечатку пальца или Face ID, разблокируете смартфон. Используя аппаратный ключ безопасности (ключ U2F), зайдёте в менеджер паролей или на другой сервис. А по разовому коду сможете войти в Телеграм, если не включите дополнительную защиту аккаунта.",
      "У однофакторной аутентификации есть недостаток: злоумышленники могут взломать или украсть пароли, поэтому лучше использовать двухфакторную. Например, вы можете на Госуслугах после ввода пароля запрашивать код из смс. Двухфакторная аутентификация безопаснее — используйте её и в разработке, и при личном использовании веб-сайтов или приложений.",
      "Итоги",
      "Авторизация и аутентификация — два разных процесса. Аутентификация нужна, чтобы проверить право доступа к данным, авторизация — это когда вы получаете доступ.",
      "Начинается проверка всегда с идентификации, за ней идёт аутентификация и в конце авторизация. Эти процессы защищают ваши персональные данные и деньги. Поэтому подходите к проверке ответственно, чтобы ваши данные не оказались в руках злоумышленников.",
      " ",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "Сериализация и Десериализация",
    answer: [
      "* Сериализация-это механизм преобразования состояния объекта в поток байтов. ",
      "* Десериализация-это обратный процесс, при котором поток байтов используется для воссоздания фактического объекта Java в памяти.",
    ],
    isParagraphBefore: true,
  },
  {
    heading: "",
    answer: ["", "", "", "", "", "", "", "", "", "", "", ""],
    isParagraphBefore: true,
  },
  {
    heading: " ",
    answer: [" ", " ", " ", " "],
    isParagraphBefore: true,
  },
];
