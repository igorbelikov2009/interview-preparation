"use strict";
exports.__esModule = true;
exports.arrayHTTP = exports.linksHTTP = void 0;
exports.linksHTTP = [
    {
        href: "https://selectel.ru/blog/http-request/",
        title: "HTTP-запросы: структура, методы, строка статуса и коды состояния "
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers",
        title: "Заголовки HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
        title: "Методы запроса"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/Safe/HTTP",
        title: "Безопасный метод HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/Idempotent",
        title: "Идемпотентный метод HTTP"
    },
    {
        href: "https://developer.mozilla.org/en-US/docs/Glossary/cacheable",
        title: "Кэшируемый ответ HTTP"
    },
];
exports.arrayHTTP = [
    {
        heading: "Как работает WWW (всемирная паутина, веб) в двух словах.",
        answer: [
            "Браузер пользователя (клиент) отправляет на сервер запрос с адресом сайта (URL), сервер получает этот запрос и отдаёт клиенту требуемый тому контент. Иными словами, весь современный веб построен на модели клиент-серверного взаимодействия. И чтобы весь этот процесс оказался возможным, необходим универсальный язык-протокол, который будет понимать и сервер, и браузер. Такой протокол есть, а называется он HTTP.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое HTTP? (HyperText Transfer Protocol)  - протокол передачи гипертекста.",
        answer: [
            "HTTP — универсальный язык-протокол, который понимает и сервер и браузер. HTTP позволяет обмениваться данными в Интернете, например HTML-документами. HTTP является протоколом клиент-серверного взаимодействия, что означает инициирование запросов к серверу самим получателем, обычно веб-браузером (web-browser). ",
            "--",
            "Протокол передачи гипертекста (Hypertext Transfer Protocol - HTTP) - это прикладной протокол для передачи гипертекстовых документов, таких как HTML. Он создан для связи между веб-браузерами и веб-серверами, хотя в принципе HTTP может использоваться и для других целей. Протокол следует классической клиент-серверной модели, когда клиент открывает соединение для создания запроса, а затем ждет ответа. HTTP - это протокол без сохранения состояния, то есть сервер не сохраняет никаких данных (состояние) между двумя парами 'запрос-ответ'. Несмотря на то, что HTTP основан на TCP/IP, он также может использовать любой другой протокол транспортного уровня с гарантированной доставкой. ",
            "Ниже перечислены общие функции, управляемые с HTTP: ",
            "1. Кэш. Сервер может инструктировать прокси и клиенты: что и как долго кэшировать. Клиент может инструктировать прокси промежуточных кэшей игнорировать хранимые документы.",
            "2. Ослабление ограничений источника. Для предотвращения шпионских и других, нарушающих приватность, вторжений, веб-браузер обчеспечивает строгое разделеление между веб-сайтами. Только страницы из того же источника могут получить доступ к информации на веб-странице. Хотя такие ограничение нагружают сервер, заголовки HTTP могут ослабить строгое разделение на стороне сервера, позволяя документу стать частью информации с различных доменов (по причинам безопасности).",
            "3. Аутентификация. Некоторые страницы доступны только специальным пользователям. Базовая аутентификация может предоставляться через HTTP, либо через использование заголовка WWW-Authenticate и подобных ему, либо с помощью настройки спецсессии, используя куки.",
            "4. Прокси и тунелирование. Серверы и/или клиенты часто располагаются в интернете и скрывают свои истинные IP-адреса от других. HTTP запросы идут через прокси для пересечения этого сетевого барьера. Не все прокси -- HTTP прокси. SOCKS-протокол, например, оперирует на более низком уровне. Другие, как, например, ftp, могут быть обработаны этими прокси.",
            "5. Сессии. Использование HTTP кук позволяет связать запрос с состоянием на сервере. Это создает сессию, хотя ядро HTTP -- протокол без состояния. Это полезно не только для корзин в интернет-магазинах, но также для любых сайтов, позволяющих пользователю настроить выход.",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP и клиент серверная архитектура.",
        answer: [
            "В клиент-серверной архитектуре клиентом может быть всё, что угодно, что имеет доступ в сеть и может отсылать сформированные HTTP- запросы, либо XML- запросы на сервер и получать от него ответы: браузер (сайт, например, фейсбук, инстаграмм), мобильное приложение, умная бытовая техника, имеющая доступ к сети, серверное приложение, настольное приложение (например, клиент компьютерной игры).",
            "Вся информация хранится на сервере, и читается - меняется клиентом по запросу. Клиентское приложение формирует запросы и отправляет на сервер. После чего програмное обеспечение сервера формирует ответ и отправляет его клиенту. После этого клиентское приложение может отправлять другие запросы, которые будут обработаны аналогичным образом.",
        ],
        isParagraph: true
    },
    {
        heading: "Для чего нужен HTTP.",
        answer: [
            "HTTP (HyperText Transfer Protocol) - протокол передачи гипертекста. Он разработан для передачи HTML- документов, для связи между браузерами и серверами, но может использоваться и для других целей. HTTP следует модели клиент-сервер, когда клиент делает запрос на сервер и ждёт от него ответа. HTTP — это протокол без сохранения состояния, что означает, что сервер не сохраняет никаких данных (состояния) между двумя запросами. Есть версии HTTP/1.1 и HTTP/2.",
            "Данные передаются в открытом виде. HTTP сам по себе не предоставляет никаких средств шифрования.",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое HTTPs? (HyperText Transfer Protocol, secure) является расширением HTTP-протокола.",
        answer: [
            "Фактически, это тот же самый протокол HTTP, только с дополнительным уровнем шифрования. HTTPS расшифровывается как «защита протокола передачи гипертекста». Таким образом, HTTP — самостоятельный протокол, а HTTPS — расширение для его защиты. По HTTP информация передается незащищенной, а HTTPS обеспечивает криптографическую защиту. Особенно актуально это для ресурсов с ответственной авторизацией. Это могут быть социальные сети или сайты платежных систем.",
            "Данные передаются в едином зашифрованном потоке, что делает невозможным получение учетных данных пользователей и прочей критической информации средствами обычного перехвата. ",
            "Таким образом, HTTP применяется для передачи данных, а HTTPS позволяет осуществлять защищенную передачу данных с помощью шифрования и выполнять авторизацию на ресурсах с высоким уровнем безопасности.",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP - сообщения.",
        answer: [
            " ",
            "HTTP - сообщения подразделяются на 2 типа: HTTP - запросы, которые отправляет клиент, например браузер на сервер. HTTP - ответы, сообщения, которые отправляет сервер.",
            "Само по себе сообщение представляет собой информацию в текстовом виде, записанную в несколько строчек. ",
            "У каждого HTTP - сообщения есть: строка состояния, заголовки и, по возможности, тело.",
        ],
        isParagraph: true
    },
    {
        heading: "Структура HTTP- сообщений.",
        answer: [
            "Каждое HTTP-сообщение, как запрос, так и ответ состоит из трёх частей, которые передаются в указанном порядке: ",
            "1. Стартовая строка (start line) — определяет тип сообщения, используется для описания версии используемого протокола и другой информации — вроде запрашиваемого ресурса или кода ответа. Как можно понять из названия, ее содержимое занимает ровно одну строчку. ",
            "2. HTTP-заголовки (HTTP Headers) — несколько строчек текста в определенном формате, которые либо уточняют запрос, либо описывают содержимое тела сообщения.",
            "3. Тело сообщения (англ. Message Body) — непосредственно данные сообщения. Обязательно должно отделяться от заголовков пустой строкой.",
            "Пустая строка сообщает, что все метаданные для конкретного запроса или ответа были отправлены.",
        ],
        isParagraph: true
    },
    {
        heading: "Запросы (HTTP Requests) - сообщения, которые отправляются клиентом на сервер, чтобы вызвать выполнение некоторых действий.",
        answer: [],
        isParagraph: true
    },
    {
        heading: "Стартовая строка HTTP-запроса",
        answer: [
            "Стартовая строка HTTP-запроса состоит из трех элементов: ",
            "1. Метод HTTP-запроса (method).",
            "2. Цель запроса: путь к ресурсу: URL ( /index.html ) ",
            "3. Версия используемого протокола (либо HTTP/1.1, либо HTTP/2), которая определяет структуру следующих за стартовой строкой данных.",
            "В примере ниже стартовая строка указывает, что в качестве метода используется GET, обращение будет произведено к ресурсу /index.html, по версии протокола HTTP/1.1: ",
            "Пример: GET/index.html HTTP/1.1 ",
        ],
        isParagraph: true
    },
    {
        heading: "Методы HTTP-запроса (Request Methods).",
        answer: [
            "HTTP имеет несколько методов запроса, которые указывают, какое действие должно выполнится для данного ресурса. Методы могут быть безопасными, идемпотентными или кэшируемыми. ",
            "1. GET - метод для чтения данных с сайта. Позволяет запросить некоторый конкретный ресурс. Дополнительные данные могут быть переданы через строку запроса (Query String) в составе URL (например ?param=value).",
            "2. HEAD - запрашивает ресурс так же, как и метод GET, но без тела ответа.",
            "3. POST - Позволяет отправить данные на сервер. Поддерживает отправку различных типов файлов, среди которых текст, PDF-документы, изображения и другие типы данных в двоичном виде. Метод используют для создания новых ресурсов, для выгрузки файлов на сервер, для отправки заполненной формы логина.",
            "4. PUT - запросы приводят к замене целевого ресурса на данные, передаваемые в запросе. Его можно использовать для обновления содержимого существующего ресурса или для создания нового ресурса.",
            "5. DELETE - удаляет указанный ресурс.",
            "6. OPTIONS - Позволяет запросить информацию о сервере, в том числе информацию о допускаемых к использованию на сервере HTTP-методов.",
            "7. PATCH - Позволяет внести частичные изменения в указанный ресурс по указанному расположению.",
        ],
        isParagraph: true
    },
    {
        heading: "Безопасный метод HTTP.",
        answer: [
            "Метод HTTP безопасен , если он не изменяет состояние сервера. Другими словами, метод безопасен, если он приводит к операции только для чтения. Несколько распространенных HTTP-методов безопасны: GET, HEAD, или OPTIONS. Все безопасные методы также идемпотентны, но не все идемпотентные методы безопасны. Например, PUT и DELETE оба являются идемпотентными, но небезопасными. Все безопасные методы также идемпотентны: HEAD PUT DELETE POST.",
        ],
        isParagraph: true
    },
    {
        heading: "Идемпотентный метод HTTP.",
        answer: [
            "Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяет состояние сервера. Все безопасные методы также идемпотентны: HEAD PUT DELETE POST.",
        ],
        isParagraph: true
    },
    {
        heading: "Кэшируемый ответ HTTP",
        answer: [
            "Кешируемые ответы - это HTTP-ответы, которые могут быть закешированы, то есть сохранены для дальнейшего восстановления и использования позже, тем самым снижая число запросов к серверу.",
            " - Кэшируемые методы: GET, HEAD.",
            " - Некэшируемые методы: PUT, DELETE, часто POST",
        ],
        isParagraph: true
    },
    {
        heading: "Чем отличаются HTTP-методы GET и POST.",
        answer: [
            "HTTP-методы GET и POST — самые распространённые способы отправить или получить данные с сервера. Но в разных случаях оба метода могут быть небезопасными или неудобными в использовании. В этой заметке рассмотрим, какой метод когда использовать.",
            "GET — метод для чтения данных с сайта. Например, для доступа к указанной странице. Он говорит серверу, что клиент хочет прочитать указанный документ. На практике этот метод используется чаще всего, например, в интернет-магазинах на странице каталога. Фильтры, которые выбирает пользователь, передаются через метод GET.",
            "POST — метод для отправки данных на сайт (сервер). Чаще всего с помощью метода POST передаются формы.",
            "GET для безопасных действий, POST для опасных",
            "Говоря совсем просто, GET-запросы лучше не использовать с приватной информацией. Вот почему: они кэшируются. Это значит, что логин и пароль, переданные через GET - запрос, могут остаться в интернете навсегда, например, в веб-архиве или кэше Гугла. Остаются в истории браузера. Чтобы узнать, какие данные отправлялись, достаточно нажать Ctrl+H.",
            "Сохраняются в закладках и пересылаются. Можно не обратить внимания и опубликовать в соцсетях или отправить ссылку с приватной информацией в GET-запросе. Сохраняются в логах сервера. Например, нельзя отправлять данные банковских карт через GET-запрос, так как это создаёт риски для пользователей. Таким образом, любые важные данные — логины, пароли, данные карты, персональные данные — лучше передавать с помощью метода POST. Также метод POST поддерживает тип кодирования данных multipart/form-data, что позволяет передавать файлы.",
            "Ещё раз коротко",
            "GET: фильтры в интернет-магазинах, передача параметров через ссылку, другие безопасные запросы.",
            "POST: любые формы с паролями или банковскими картами, формы заявок с персональными данными, отправка файлов.",
        ],
        isParagraph: true
    },
    {
        heading: "Чем отличаются PUT- и POST-запросы?",
        answer: [
            "PUT - запросы приводят к замене целевого ресурса на данные, передаваемые в запросе. Его можно использовать для обновления содержимого существующего ресурса или для создания нового ресурса.",
            "POST - запросы приводят к специфической для ресурса обработке данных, передаваемых в запросе. Их можно использовать для выполнения различных действий. В том числе — для создания новых ресурсов, для выгрузки файлов на сервер, для отправки форм.",
            "Ещё одно отличие между PUT и POST запросами заключается в том, что PUT-запросы являются идемпотентными, а POST-запросы — нет. То есть — если запрос, в котором передаются одни и те же данные, и который выполняется по одному и тому же URL, будет выполнен несколько раз, это равносильно однократному выполнению этого запроса. Многократное выполнение POST-запроса не эквивалентно его однократному выполнению. То есть — несколько таких запросов, например, могут привести к созданию нескольких объектов на сервере.",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP - заголовки.",
        answer: [
            "Заголовки HTTP позволяют клиенту и серверу отправлять дополнительную информацию с HTTP-запросом или ответом.",
            "В HTTP-заголовке содержится строка (''ключ:значение'') с ''названием-заголовка:значением''. Пробелы перед значением игнорируются. Название заголовка не учитывает регистр, то есть между Host и host, с точки зрения HTTP, нет никакой разницы. Однако в названиях заголовков принято начинать каждое новое слово с заглавной буквы.  Структура значения зависит от конкретного заголовка. Несмотря на то, что заголовок вместе со значениями может быть достаточно длинным, занимает он всего одну строчку.",
            "В запросах может передаваться большое число различных заголовков, но все их можно разделить на три категории: ",
            "1. Общего назначения, которые применяются ко всему сообщению целиком.",
            "2. Заголовки запроса уточняют некоторую информацию о запросе, сообщая дополнительный контекст или ограничивая его некоторыми логическими условиями.",
            "3. Заголовки представления, которые описывают формат данных сообщения и используемую кодировку. Добавляются к запросу только в тех случаях, когда с ним передается некоторое тело.",
            "-- ",
            "Самые частые заголовки запроса ",
            "1. Host. Используется для указания того, с какого конкретно хоста запрашивается ресурс. В качестве возможных значений могут использоваться как доменные имена, так и IP-адреса. На одном HTTP-сервере может быть размещено несколько различных веб-сайтов. Для обращения к какому-то конкретному требуется данный заголовок.",
            "2. User-Agent. Заголовок используется для описания клиента, который запрашивает ресурс. Он содержит достаточно много информации о пользовательском окружении. Например, может указать, какой браузер используется в качестве клиента, его версию, а также операционную систему, на которой этот клиент работает.",
            "3. Refer. Используется для указания того, откуда поступил текущий запрос. Например, если вы решите перейти по какой-нибудь ссылке в этой статье, то вероятнее всего к запросу будет добавлен заголовок Refer: https://selectel.ru",
            "4. Accept. Позволяет указать, какой тип медиафайлов принимает клиент. В данном заголовке могут быть указаны несколько типов, перечисленные через запятую (‘ , ‘). А для указания того, что клиент принимает любые типы, используется следующая последовательность — */*.",
            "5. Cookie. Данный заголовок может содержать в себе одну или несколько пар «Куки-Значение» в формате cookie=value. Куки представляют собой небольшие фрагменты данных, которые хранятся как на стороне клиента, так и на сервере, и выступают в качестве идентификатора. Куки передаются вместе с запросом для поддержания доступа клиента к ресурсу. Помимо этого, куки могут использоваться и для других целей, таких как хранение пользовательских предпочтений на сайте и отслеживание клиентской сессии. Несколько кук в одном заголовке могут быть перечислены с помощью символа точка с запятой (‘ ; ‘), который  используется как разделитель.",
            "6. Authorization. Используется в качестве еще одного метода идентификации клиента на сервере. После успешной идентификации сервер возвращает токен, уникальный для каждого конкретного клиента. В отличие от куки, данный токен хранится исключительно на стороне клиента и отправляется клиентом только по запросу сервера. Существует несколько типов аутентификации, конкретный метод определяется тем веб-сервером или веб-приложением, к которому клиент обращается за ресурсом.",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Тело запроса. ",
        answer: [
            "Тело запроса — это информация, которую передал браузер при запросе страницы. Но тело запроса присутствует только, если браузер запросил страницу методом POST. Дело в том, что POST — это метод, специально предназначенный для отправки данных на сайт. Чаще всего метод POST браузер задействует в момент отправки формы. В этом случае телом запроса будет содержимое формы. ",
            "Завершающая часть HTTP-запроса — это его тело. Не у каждого HTTP-метода предполагается наличие тела. Так, например, методам вроде GET, HEAD, DELETE, OPTIONS обычно не требуется тело. Некоторые виды запросов  могут отправлять данные на сервер в теле запроса: самый распространенный из таких методов — POST. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Ответы HTTP (responses) -  сообщения, которые сервер отправляет в ответ на клиентский запрос.",
        answer: ["Ответы содержат следующие элементы: стартовая строка, заголовки и тело.", " "],
        isParagraph: true
    },
    {
        heading: "Стартовая строка ответа HTTP. ",
        answer: [
            "HTTP-ответ является сообщением, которое сервер отправляет клиенту в ответ на его запрос. Его структура равна структуре HTTP-запроса: стартовая строка, заголовки и тело. ",
            "Стартовая строка HTTP-ответа называется строкой статуса (status line). На ней располагаются следующие элементы: ",
            "1. Уже известная нам по стартовой строке запроса версия протокола (HTTP/2 или HTTP/1.1).",
            "2. Код состояния, который указывает, насколько успешно завершилась обработка запроса. (Ниже это '200' - код ошибки)",
            "3. Пояснение — короткое текстовое описание к коду состояния. (Ниже это 'OK') Используется исключительно для того, чтобы упростить понимание и восприятие человека при просмотре ответа.",
            "Так выглядит строка состояния ответа: HTTP/1.1 200 OK ",
        ],
        isParagraph: true
    },
    {
        heading: "Заголовки ответа ",
        answer: [
            "Response Headers, или заголовки ответа, используются для того, чтобы уточнить ответ, и никак не влияют на содержимое тела. Они существуют в том же формате, что и остальные заголовки, а именно  «Имя-Значение» с двоеточием (:) в качестве разделителя. ",
            "Ниже приведены наиболее часто встречаемые в ответах заголовки: ",
            "1. Server. Содержит информацию о сервере, который обработал запрос. ",
            "Пример: Server: ngnix",
            " --",
            "2. Set-Cookie. Содержит куки, требуемые для идентификации клиента. Браузер парсит куки и сохраняет их в своем хранилище для дальнейших запросов.",
            "Пример:  Set-Cookie:PHPSSID=bf42938f",
            " --",
            "3. WWW-Authenticate. Уведомляет клиента о типе аутентификации, который необходим для доступа к запрашиваемому ресурсу.",
            "Пример: WWW-Authenticate: BASIC realm=»localhost»",
        ],
        isParagraph: true
    },
    {
        heading: "Тело HTTP - сообщения.",
        answer: [
            "Тело HTTP - сообщения используется для передачи тела объекта запроса или тела объекта ответа. Тело сообщения может отсутствовать, но стартовая строка и заголовок являются обязательными элементами. Самым популярным типом тела сообщения является либо HTML, либо JSON.",
        ],
        isParagraph: true
    },
    {
        heading: "HTTP, коды состояния (ответов) и текст статуса",
        answer: [
            "Коды состояния HTTP используются для того, чтобы сообщить клиенту статус их запроса. HTTP-сервер может вернуть код, принадлежащий одной из пяти категорий кодов состояния: ",
            "1хх. Информационный. Коды из данной категории носят исключительно информативный характер и никак не влияют на обработку запроса.",
            "--- 100 Continue (продолжай)",
            "2хх. Успех. Коды состояния из этой категории возвращаются в случае успешной обработки клиентского запроса.",
            "--- 200 Ok (Успех). Возвращается в случае успешной обработки запроса, при этом тело ответа обычно содержит запрошенный ресурс.",
            "--- 201 Created (Создано)",
            "--- 204 No content (Нет содержимого)",
            "3хх. Перенаправление. Эта категория содержит коды, которые возвращаются, если серверу нужно перенаправить клиента.",
            "--- 300 Moved permanently (перемещено навсегда)",
            "--- 301 Moved temporarily (перемещено временно)",
            "--- 302 Found (перемещено временно). Перенаправляет клиента на другой URL. Например, данный код может прийти, если клиент успешно прошел процедуру аутентификации и теперь может перейти на страницу своей учетной записи.",
            "4хх. Ошибка клиента. Коды данной категории означают, что на стороне клиента был отправлен некорректный запрос. Например, клиент в запросе указал не поддерживаемый метод или обратился к ресурсу, к которому у него нет доступа.",
            "--- 400 Bad request (некорректный запрос). Данный код можно увидеть, если запрос был сформирован с ошибками. Например, в нем отсутствовали символы завершения строки.",
            "--- 401 Unauthorized (не авторизован)",
            "--- 403 Forbidden (Запрещенный). Означает, что клиент не обладает достаточными правами доступа к запрошенному ресурсу. Также данный код можно встретить, если сервер обнаружил вредоносные данные, отправленные клиентом в запросе.",
            "--- 404 Not found (не найден). Каждый из нас, так или иначе, сталкивался с этим кодом ошибки. Данный код можно увидеть, если запросить у сервера ресурс, которого не существует на сервере.",
            "5хх. Ошибка сервера. Ответ с кодами из этой категории приходит, если на стороне сервера возникла ошибка.",
            "--- 500 Internal server error (Внутренняя ошибка сервера). Данный код возвращается сервером, когда он не может по определенным причинам обработать запрос.",
            "--- 502 Bad gateway (Ошибка проксирования)",
        ],
        isParagraph: true
    },
    {
        heading: "URI URL URN",
        answer: [
            "URI - Uniform Resource Identifier. Унифицированный идентификатор ресурса. Включает в себя: URL и URN.",
            "URI: https://github.com/pulls/mentioned ",
            "URL - Uniform Resource Locator. Унифицированный определитель местонахождения ресурса.",
            "URL: https://github.com/",
            "URN - Uniform Resource Name. Унифицированное имя ресурса.",
            "URN: /pulls/mentioned",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Cross-Origin Resource Sharing (CORS)? ",
        answer: [
            "Cross-Origin Resource Sharing (CORS) — механизм, использующий дополнительные HTTP-заголовки, чтобы дать возможность агенту пользователя получать разрешения на доступ к выбранным ресурсам с сервера на источнике (домене), отличном от того, что сайт использует в данный момент. Говорят, что агент пользователя делает запрос с другого источника (cross-origin HTTP request), если источник текущего документа отличается от запрашиваемого ресурса доменом, протоколом или портом.",
            "В целях безопасности браузеры ограничивают cross-origin запросы, инициируемые скриптами. Например, XMLHttpRequest и Fetch API следуют политике одного источника (same-origin policy). Это значит, что web-приложения, использующие такие API, могут запрашивать HTTP-ресурсы только с того домена, с которого были загружены, пока не будут использованы CORS-заголовки. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое HTTP cookie (куки) и для чего их используют?",
        answer: [
            "Сookie (куки) — это небольшие текстовые файлы, сгенерированные сайтами. В них записана информация о посещении сайта. Эти файлы хранятся на компьютере. Cookie нужны, чтобы идентифицировать пользователя, использовать его учетные данные для входа в систему при следующем посещении страницы. Когда вы вернётесь на сайт, он узнает вас и автоматически подстроится. ",
            "Куки отправляются сервером на браузер пользователя, хранятся на жестком диске в папке Пользователи (Users). С каждым новым запросом к данному серверу, отсылаются обратно. ",
            "Куки обычно устанавливаются веб-сервером при помощи заголовка Set-Cookie. Затем браузер будет автоматически добавлять их в (почти) каждый запрос на тот же домен при помощи заголовка Cookie.",
            "Веб-клиент, всякий раз при попытке открыть страницу соответствующего сайта, пересылает этот фрагмент данных веб-серверу в составе HTTP-запроса.",
            " --",
            "Важная особенность у файлов cookie: ",
            "файлы cookie имеют время жизни, которое мы сами можем устанавливать. ",
            "-- ",
            "Файлы cookie представляют собой текстовые файлы с парами ключ-значение. Куки можно создавать через JavaScript при помощи свойства Document.cookie. Если флаг HttpOnly не установлен, то и доступ к существующим cookies можно получить через JavaScript. ",
            " - document.cookie = 'yummy_cookie=choco';",
            " - document.cookie = 'tasty_cookie=strawberry';",
            "-- ",
            "Обычно cookie-файлы хранятся на жестком диске в папке Пользователи (Users). Например, куки из браузера Google Chrome хранятся по следующему пути: C:UsersНазвание_пользователяAppDataLocalGoogleChromeUser DataDefault (или Profile)Cookies. Данные из других браузеров можно найти по схожему пути, только найдите папку другого браузера. ",
            "Cookie используются, главным образом, для: ",
            "1. Управления сеансом (логины, корзины для виртуальных покупок).",
            "2. Персонализации (пользовательские предпочтения).",
            "3. Мониторинга (отслеживания поведения пользователя).",
            "Один из наиболее частых случаев использования куки – это аутентификация....  ",
            "-- ",
        ],
        isParagraph: true
    },
    {
        heading: "Прокси-сервер, прокси. ",
        answer: [
            "Прокси-сервер – это дополнительный шлюз, участвующий в интернет-соединении, дополнительное звено между вами и интернетом. Proxy используется как посредник между клиентом и сайтом, на который он хочет перейти. По сути, прокси — это фильтр между человеком и огромными (и не всегда безопасными) данными в сети.",
            "При подключения через proxy-server происходит замена IP-адреса, что позволяет ускорить интернет-соединение, обойти блокировку какого-либо ресурса и другое.",
            "С прокси-серверами сталкиваются почти все пользователи интернета, даже если они об этом не подозревают. ",
            "---",
            "Прокси-сервер — промежуточный сервер (комплекс программ) в компьютерных сетях, выполняющий роль посредника между пользователем и целевым сервером (при этом о посредничестве могут как знать, так и не знать обе стороны), позволяющий клиентам как выполнять косвенные запросы (принимая и передавая их через прокси-сервер) к другим сетевым службам, так и получать ответы. Сначала клиент подключается к прокси-серверу и запрашивает какой-либо ресурс (например e-mail), расположенный на другом сервере.",
        ],
        isParagraph: true
    },
    {
        heading: "Обратный прокси. ",
        answer: [
            "Обратный прокси-сервер является службой, которая работает на каждом узле и обрабатывает разрешение конечных точек, автоматический повтор операций и другие сбои подключения от имени служб клиента. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Зачем нужен прокси? ",
        answer: [
            "При подключения через proxy-server происходит замена IP-адреса, что позволяет:",
            " - ускорить интернет-соединение;",
            " - обойти блокировку какого-либо ресурса;",
            " - усилить безопасность соединения;",
            " - защитить приватность (конфиденциальность) клиента, чтобы сайты не знали, кто именно их посещает;",
            " - балансировать нагрузку на посещаемый ресурс;",
            " - и другое.",
        ],
        isParagraph: true
    },
    {
        heading: "Как работает прокси?",
        answer: [
            "Прокси – это сервер, к которому вы подключаетесь, чтобы изменить свой IP-адрес. Работает это так:",
            "1. Пользователь из России подключился к прокси США. IP юзера изменился с российского на американский ",
            "2. Человек заходит на веб-ресурс.",
            "3. Устройство отправляет запрос прокси-серверу.",
            "4. Прокси-сервер отправляет запрос веб-странице от своего имени.",
            "5. Веб-страница отправляет данные промежуточному серверу",
            "6. Промежуточный сервер доставляет эти данные вам",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое прокси сервер и впн?",
        answer: [
            "Прокси - это посредник между клиентом и серверов. VPN - это виртуальная сеть, которая для устройства ничем не отличается от локальной. В большинстве случаев VPN определяется ПО как сетевой адаптер, поэтому программа, чей трафик направлен через VPN, не 'знает' об этом. Приложения работают, используя обычные сетевые протоколы. ",
        ],
        isParagraph: true
    },
    {
        heading: "Чем прокси отличается от VPN?",
        answer: [
            "Главное отличие прокси от VPN заключается в том, что VPN защищает весь сетевой трафик, а прокси – только интернет-трафик. Прокси передает запросы, действуя как посредник, а VPN туннелирует всю сетевую активность до уровня операционной системы. Компании используют VPN, чтобы дать доступ сотрудникам к корпоративным ресурсам, не беспокоясь о том, что трафик будет перехвачен или задамплен провайдером.",
        ],
        isParagraph: true
    },
    {
        heading: "Для чего используется WebSocket? В чем принцип его работы? ",
        answer: [
            "WebSocket — протокол связи, предназначенный для обмена данными между браузером и сервером, используя постоянное соединение. Данные передаются по нему в обоих направлениях в виде «пакетов», без разрыва соединения и дополнительных HTTP-запросов.",
            "WebSocket особенно хорош для сервисов, которые нуждаются в постоянном обмене данными, например онлайн игры, торговые площадки, работающие в реальном времени, и т.д.",
            "--",
        ],
        isParagraph: true
    },
    {
        heading: "Что такое Веб-компоненты и какие технологии в них используются?",
        answer: [
            "Веб-компоненты — технология, которая позволяет создавать многократно используемые компоненты в веб-документах и веб-приложениях. Веб-компоненты поддерживаются веб-браузерами напрямую и не требуют дополнительных библиотек для работы. ",
            "Веб-компоненты включают четыре технологии, каждая из которых может использоваться отдельно от других: ",
            "1. Custom Elements — API для создания собственных HTML элементов.",
            "2. HTML Templates — тег позволяет реализовывать изолированные DOM-элементы.",
            "3. Shadow DOM — изолирует DOM и стили в разных элементах.",
            "4. HTML Imports — импорт HTML документов.",
        ],
        isParagraph: true
    },
    {
        heading: "Криптографическая защита.",
        answer: [
            "Криптографическая защита - это защита данных с помощью криптографического преобразования, под которым понимается преобразование данных методом шифрованием, кодирования или иного преобразования информации. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: "Домен, доменные имена это... ",
        answer: [
            "Домен — это часть адреса сайта. ",
            "Любой адрес сайта состоит из доменов разных уровней. ",
            "Например, в адрес yandex.ru входит домен первого уровня — «.ru» и домен второго уровня — «yandex». ",
            "Домен первого уровня обычно обозначает страну или тематику. Так, домены «.ru» и «.рф» предназначены для сайтов из России, а «.aero» — для авиатранспортных компаний. ",
            "Домены второго и последующих уровней чаще всего указывают на разделы сайта или внутренние проекты компании — например, market.yandex.ru. ",
            "-- ",
            "Доменное имя — символьное имя, служащее для идентификации областей, которые являются единицами административной автономии в сети Интернет... ",
        ],
        isParagraph: true
    },
    {
        heading: "Как доменное имя связано с IP-адресом сайта. ",
        answer: [
            "Компьютеры находят друг друга в Сети и обмениваются данными с помощью IP-адресов. IP-адрес — это строка из четырёх чисел (октетов), разделённых точками. В этих числах зашифрована информация о местоположении сервера с файлами сайта. Каждое доменное имя привязано к IP-адресу. Например, домену skillbox.ru соответствует адрес 178.248.237.96. ",
        ],
        isParagraph: true
    },
    {
        heading: "IP-адрес ",
        answer: [
            "P-адресов. IP-адрес — это строка из четырёх чисел (октетов), разделённых точками. В этих числах зашифрована информация о местоположении сервера с файлами сайта. Каждое доменное имя привязано к IP-адресу. Например, домену skillbox.ru соответствует адрес 178.248.237.96. ",
            "IP-адрес — это 32-битный номер. Он уникально идентифицирует хост (компьютер или другое устройство, например, принтер или маршрутизатор) в сети TCP/IP. IP-адреса обычно выражаются в десятичном представлении с точками, в виде четырех номеров, разделенных точками, например, 192.168.123.132. Чтобы понять, как маски подсети используются для различия между хостами, сетями и подсетями, изучите IP-адрес в двоичном представлении. ",
            " ",
        ],
        isParagraph: true
    },
    {
        heading: " ",
        answer: [" ", " ", " ", " ", " ", " ", " ", " ", " "],
        isParagraph: true
    },
];
