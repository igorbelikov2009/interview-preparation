"use strict";
exports.__esModule = true;
var react_1 = require("react");
var Page_1 = require("../components/general/Page/Page");
var PageLink_1 = require("../components/general/PageLink/PageLink");
var LocalStoragePage = function () {
    var links = [
        {
            href: "https://learn.javascript.ru/localstorage",
            title: "LocalStorage, sessionStorage"
        },
        {
            href: "https://learn.javascript.ru/cookie",
            title: "Куки, document.cookie"
        },
    ];
    var ArrayHeadingAnswers = [
        {
            heading: "Чем отличаются куки-файлы, сессионное хранилище и локальное хранилище?",
            answer: [
                "Локальное хранилище, это место, которое браузеры могут использовать для локального хранения данных. В нём может храниться до 10 Мб данных. Сессионное хранилище — это разновидность локального хранилища, которое привязано к сессии и удаляется после её завершения. В сессионном хранилище может храниться до 5 Мб данных.",
                "Куки-файлы используются для хранения небольших объёмов данных, не превышающих 4 Кб. Ими может пользоваться браузер, их может запрашивать у браузера сервер.",
            ],
            isParagraph: true
        },
        {
            heading: "Что такое файл cookie?",
            answer: [
                "Файл cookie — это небольшой пакет данных, хранящийся на вашем компьютере.",
                "Например, веб-сайт может размещать файлы cookie в браузерах посетителей, чтобы запомнить учетные данные для входа в систему при следующем посещении страницы пользователем.",
                "Под капотом файлы cookie представляют собой текстовые файлы с парами ключ-значение. Чтобы создать, прочитать или удалить файлы cookie, используйте document.cookieсвойство.",
                "Например, давайте создадим файл document.cookie, который сохраняет имя пользователя:",
                "document.cookie = 'username=foobar123';",
            ],
            isParagraph: true
        },
        {
            heading: "Что такое веб-хранилище?",
            answer: [
                "Веб-хранилище — это API , который позволяет браузерам локально хранить пары ключ-значение в браузере пользователя. Использование веб-хранилища делает этот процесс более интуитивным, чем использование файлов cookie.",
                "Веб-хранилище предоставляет два способа хранения данных:",
                "'localStorage' - локальное хранилище  — хранит данные для клиента без срока годности.",
                "Вот пример того, как вы можете сохранить, получить доступ и удалить элемент из localStorage:",
                "localStorage.setItem('favoriteColor', 'gray');",
                "let data = localStorage.getItem('favoriteColor'); console.log(data);",
                "localStorage.removeItem('favoriteColor');",
                "localStorage.clear()",
                "'sessionStorage' -хранилище сеанса — хранит данные только для одного сеанса. Данные исчезают при закрытии браузера.",
                "И вот как вы можете сделать то же самое, используя sessionStorage",
                "sessionStorage.setItem('favoriteColor', 'gray');",
                "let data = sessionStorage.getItem('favoriteColor'); console.log(data);",
                "sessionStorage.removeItem('favoriteColor');",
                "sessionStorage.clear();",
            ],
            isParagraph: true
        },
        {
            heading: "Зачем вам веб-хранилище?",
            answer: [
                "Веб-хранилище позволяет хранить большие объемы данных локально. Главное, это не влияет на производительность сайта.",
                "При использовании веб-хранилища информация не хранится на сервере. Это делает его более предпочтительным подходом по сравнению с файлами cookie.",
            ],
            isParagraph: true
        },
        {
            heading: "Что такое CORS?",
            answer: [
                "CORS (Cross-Origin Resource Sharing, совместное использование ресурсов между разными источниками) — это браузерный механизм, который позволяет предоставлять страницам доступ к ресурсам, расположенным за пределами некоего домена. Это расширяет возможности страниц и добавляет гибкости политике одинакового источника (same-origin policy).",
            ],
            isParagraph: true
        },
        {
            heading: "В чём отличия технологии Long Polling, протокола WebSocket и событий, генерируемых сервером?",
            answer: [
                " Технология Long Polling применяется при взаимодействии клиентских и серверных систем. Клиент отправляет серверу запрос, ответ на который поступает тогда, когда в распоряжении сервера оказываются данные, запрошенные клиентом. После этого клиент выполняет новый запрос.",
                "Протокол WebSocket позволяет устанавливать долгоживущие двусторонние соединения между клиентом и сервером.",
                "В основе событий, генерируемых сервером, лежит использование долгоживущего HTTP-соединения, которое используется для отправки клиенту новых данных по инициативе сервера.",
            ],
            isParagraph: true
        },
    ];
    return (react_1["default"].createElement("div", null,
        react_1["default"].createElement(PageLink_1["default"], { links: links, title: "\u041A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B, \u0441\u0435\u0441\u0441\u0438\u043E\u043D\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 \u0438 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435, \u0441\u0441\u044B\u043B\u043A\u0438" }),
        react_1["default"].createElement(Page_1["default"], { title: "\u0427\u0435\u043C \u043E\u0442\u043B\u0438\u0447\u0430\u044E\u0442\u0441\u044F \u043A\u0443\u043A\u0438-\u0444\u0430\u0439\u043B\u044B, \u0441\u0435\u0441\u0441\u0438\u043E\u043D\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435 \u0438 \u043B\u043E\u043A\u0430\u043B\u044C\u043D\u043E\u0435 \u0445\u0440\u0430\u043D\u0438\u043B\u0438\u0449\u0435?", ArrayHeadingAnswers: ArrayHeadingAnswers })));
};
exports["default"] = LocalStoragePage;
